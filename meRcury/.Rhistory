library(meRcury)
GetGDELT()
FolderForResults <- choose.dir(caption = "Select where to store GDELT Results")
fwrite(GDELTData, file = paste(FolderForResults, "/Date", dates, ".csv"))
#This code grabs the Global Knowledge Graph data for the dates specified by the DatesForGDELT() function
GDELTData <-
get_data_gkg_days_detailed(
dates = DatesForGDELT(daysBack = DaysBack),
#dates = c("2018-09-08"),
table_name = 'gkg',
return_message = T
)
ates = DatesForGDELT(daysBack = DaysBack)
dates = DatesForGDELT(daysBack = DaysBack)
dates = DatesForGDELT(daysBack = 1)
fwrite(GDELTData, file = paste(FolderForResults, "/Date", dates, ".csv"))
fwrite(GDELTData, file = paste(FolderForResults, "/Date", dates, ".csv", sep = ""))
library(meRcury)
gc()
#Look for Themes:####
#Grab the GDELT Codebook
GDELT_Codebook <- get_gdelt_codebook_ft_api(code_book = "gkg")
save.image("~/Mercury/meRcury/data/GDELT_Codebook.RData")
library(meRcury)
GetGDELT()
?gsub
dates = DatesForGDELT(daysBack = DaysBack)
dates = DatesForGDELT(daysBack = 1)
dates <- gsub("-", "_", dates)
dates = DatesForGDELT(daysBack = 1)
fwrite(GDELTData, file = paste(FolderForResults, "/GDELTDataDate", dates, ".csv", sep = ""))
FolderForResults <- choose.dir(caption = "Select where to store GDELT Results")
fwrite(GDELTData, file = paste(FolderForResults, "/GDELTDataDate", dates, ".csv", sep = ""))
?fwrite
write.csv(GDELTData, file = paste(FolderForResults, "/GDELTData2Date", dates, ".csv", sep = ""))
fwrite(GDELTData, file = paste(FolderForResults, "/GDELTDataDate2", dates, ".txt", sep = ""), sep = "|")
x <- fread("C:/Users/hwalbert001/Desktop/GDELTDataDate2018-09-27.csv")
ExtractEGYPT()
ExtractEGYPT(GDELTData = GDELTData)
library(meRcury)
library(meRcury)
meRcury::GetGDELT()
2+2
library(meRcury)
GetGDELT(SpecificDates = "2018-07-01")
DatesForGDELT(1)
DatesForGDELT(2)
ExtractEGYPT(GDELTData = GDELTData)
rm(gdelt_detailed_logs, dates, EgyptData)
#
#
ExtractEGYPT <- function(GDELTData, writeResults = T){
#Look for Organizations:####
cat("Finding Egypt Specific Organizations... \n")
EgyptOrganizations <- c("muslim brotherhood", "egyptian police", "egyptian military", "egyptian army", "egyptian", "Harakat Sawa'd Misr", "Harakat Sawad Misr", "HASM", "ISIS-Sinai", "ISIS Sinai", "Liwa al-Thawra")
AllOrganizations <- data.frame()
for (i in EgyptOrganizations){
Result <- filter(GDELTData, grepl(tolower(i), tolower(organizations)))
AllOrganizations <- rbind(Result, AllOrganizations)
}
AllOrganizations <- unique(AllOrganizations)
#Look for Themes:####
#Grab the GDELT Codebook
#GDELT_Codebook <- get_gdelt_codebook_ft_api(code_book = "gkg")
#Look at some of the Egypt themes in the GDELT Codebook:
cat("Finding Egypt Specific Themes... \n")
EgyptThemes <- c(grep("EGYPT", GDELT_Codebook$idGKGTheme, value = T))
AllThemes <- data.frame()
for (i in EgyptThemes){
Result <- filter(GDELTData, grepl(tolower(i), tolower(themes)))
AllThemes <- rbind(Result, AllThemes)
}
AllThemes <- unique(AllThemes)
cat("Finding Egypt Specific Domain Names... \n")
AllDomains <- data.frame()
EgyptDomains <- c("almasryalyoum.com", "ahram.org.eg", "alwafd.org", "youm7.com", "egyptindependent.com", "dailynewsegypt.com")
for (i in EgyptDomains){
Result <- filter(GDELTData, grepl(tolower(i), tolower(domainSource)))
AllDomains <- rbind(Result, AllDomains)
}
AllDomains <- unique(AllDomains)
AllData <- rbind(AllOrganizations, AllThemes, AllDomains)
AllData <- unique(AllData)
EgyptData <<- AllData
if(writeResults==T){
FolderForResults <- choose.dir(caption = "Select where to store Egypt specific GDELT Results")
fwrite(EgyptData, file = paste(FolderForResults, "/EgyptDataDate", dates, ".csv", sep = ""))
}
}
ExtractEGYPT(GDELTData = GDELTData)
dates="070118"
ExtractEGYPT(GDELTData = GDELTData)
ExpandEgypt <- function(EgyptData){
AllData <- EgyptData
cat("Parsing Tone, Names, Locations, and Organizations... \n")
ToneData <- data.frame(t(data.frame(strsplit(AllData$tone, ","))))
names(ToneData) <- c("Tone","PositiveScore", "NegativeScore", "Polarity", "ActivityReferenceDensity", "Self_GroupReferenceDensity", "WordCount")
ToneData[] <- lapply(ToneData, as.character)
ToneData[] <- lapply(ToneData, as.numeric)
AllData <- cbind(AllData, ToneData)
#dates <- data.frame(parse_gkg_mentioned_dates(AllData))
locations <- data.frame(parse_gkg_mentioned_locations(AllData))
names <- data.frame(parse_gkg_mentioned_names(AllData))
organizations <- data.frame(parse_gkg_mentioned_organizations(AllData))
#people <- data.frame(parse_gkg_mentioned_people(AllData))
AllData <- left_join(AllData, locations, by = "idGKG")
AllData <- left_join(AllData, names, by = "idGKG")
AllData <- left_join(AllData, organizations, by = "idGKG")
EgyptData <<- AllData
if(writeResults==T){
FolderForResults <- choose.dir(caption = "Select where to store Egypt specific GDELT Results")
fwrite(EgyptData, file = paste(FolderForResults, "/EgyptExpandedDataDate", dates, ".csv", sep = ""))
}
}
ExpandEgypt <- function(EgyptData){
AllData <- EgyptData
cat("Parsing Tone, Names, Locations, and Organizations... \n")
ToneData <- data.frame(t(data.frame(strsplit(AllData$tone, ","))))
names(ToneData) <- c("Tone","PositiveScore", "NegativeScore", "Polarity", "ActivityReferenceDensity", "Self_GroupReferenceDensity", "WordCount")
ToneData[] <- lapply(ToneData, as.character)
ToneData[] <- lapply(ToneData, as.numeric)
AllData <- cbind(AllData, ToneData)
#dates <- data.frame(parse_gkg_mentioned_dates(AllData))
locations <- data.frame(parse_gkg_mentioned_locations(AllData))
names <- data.frame(parse_gkg_mentioned_names(AllData))
organizations <- data.frame(parse_gkg_mentioned_organizations(AllData))
#people <- data.frame(parse_gkg_mentioned_people(AllData))
AllData <- left_join(AllData, locations, by = "idGKG")
AllData <- left_join(AllData, names, by = "idGKG")
AllData <- left_join(AllData, organizations, by = "idGKG")
EgyptDataExpanded <<- AllData
if(writeResults==T){
FolderForResults <- choose.dir(caption = "Select where to store Egypt specific GDELT Results")
fwrite(EgyptData, file = paste(FolderForResults, "/EgyptExpandedDataDate", dates, ".csv", sep = ""))
}
}
ExpandEgypt(EgyptData = EgyptData)
ExpandEgypt <- function(EgyptData, writeResults = T){
AllData <- EgyptData
cat("Parsing Tone, Names, Locations, and Organizations... \n")
ToneData <- data.frame(t(data.frame(strsplit(AllData$tone, ","))))
names(ToneData) <- c("Tone","PositiveScore", "NegativeScore", "Polarity", "ActivityReferenceDensity", "Self_GroupReferenceDensity", "WordCount")
ToneData[] <- lapply(ToneData, as.character)
ToneData[] <- lapply(ToneData, as.numeric)
AllData <- cbind(AllData, ToneData)
#dates <- data.frame(parse_gkg_mentioned_dates(AllData))
locations <- data.frame(parse_gkg_mentioned_locations(AllData))
names <- data.frame(parse_gkg_mentioned_names(AllData))
organizations <- data.frame(parse_gkg_mentioned_organizations(AllData))
#people <- data.frame(parse_gkg_mentioned_people(AllData))
AllData <- left_join(AllData, locations, by = "idGKG")
AllData <- left_join(AllData, names, by = "idGKG")
AllData <- left_join(AllData, organizations, by = "idGKG")
EgyptDataExpanded <<- AllData
if(writeResults==T){
FolderForResults <- choose.dir(caption = "Select where to store Egypt specific GDELT Results")
fwrite(EgyptData, file = paste(FolderForResults, "/EgyptExpandedDataDate", dates, ".csv", sep = ""))
}
}
?parse_gkg_mentioned_locations
ExpandEgypt(EgyptData = EgyptData)
ExpandEgypt <- function(EgyptData, writeResults = T){
AllData <- EgyptData
cat("Parsing Tone, Names, Locations, and Organizations... \n")
ToneData <- data.frame(t(data.frame(strsplit(AllData$tone, ","))))
names(ToneData) <- c("Tone","PositiveScore", "NegativeScore", "Polarity", "ActivityReferenceDensity", "Self_GroupReferenceDensity", "WordCount")
ToneData[] <- lapply(ToneData, as.character)
ToneData[] <- lapply(ToneData, as.numeric)
AllData <- cbind(AllData, ToneData)
#dates <- data.frame(parse_gkg_mentioned_dates(AllData))
locations <- data.frame(parse_gkg_mentioned_locations(AllData))
names <- data.frame(parse_gkg_mentioned_names(AllData))
organizations <- data.frame(parse_gkg_mentioned_organizations(AllData))
#people <- data.frame(parse_gkg_mentioned_people(AllData))
AllData <- left_join(AllData, locations, by = "idGKG")
AllData <- left_join(AllData, names, by = "idGKG")
AllData <- left_join(AllData, organizations, by = "idGKG")
EgyptDataExpanded <<- AllData
if(writeResults==T){
FolderForResults <- choose.dir(caption = "Select where to store Egypt specific GDELT Results")
fwrite(EgyptDataExpanded, file = paste(FolderForResults, "/EgyptExpandedDataDate", dates, ".csv", sep = ""))
}
}
ExpandEgypt(EgyptData = EgyptData)
gc()
library(meRcury)
library(meRcury)
GetGDELT(SpecificDates = "2018-07-01")
ExtractEGYPT(GDELTData = GDELTData)
ExpandEgypt(EgyptData = EgyptData)
names(EgyptDataExpanded)
library(meRcury)
x <- GDELT_Codebook
View(x)
EgyptThemes <- c(grep("EGYPT", GDELT_Codebook$idGKGTheme, value = T))
EgyptThemes
et <- filter(GDELT_Codebook, grep("EGYPT", idGKGTheme))
et <- filter(GDELT_Codebook, grepl("EGYPT", idGKGTheme))
View(et)
library(ggmap)
?get_map
map <- get_map(location = 'Cairo, Egypt', zoom = 12)
map <- get_map(location = 'Cairo, Egypt', zoom = 12, source = "osm")
map <- get_map(location = 'Cairo, Egypt', zoom = 12, source = "stamen")
map <- get_map(location = "Cairo", zoom = 12)
map <- get_map(location = "Cairo", zoom = 12, source = "osm")
load("~/GDELT REPO/sep1_10.RData")
ExtractEGYPT(GDELTData = sep1_10)
dates = "sep1_10"
ExtractEGYPT(GDELTData = sep1_10)
map <- get_map(location = 'Cairo, Egypt', zoom = 12)
uninstall("ggmap")
uninstall
?message()
unload
?eapply
eapply(env = globalenv(), names)
eapply(env = globalenv(), names, all.names = T)
rm(.GoogleGeocodeQueryCount)
gc()
map <- get_map(location = 'Cairo, Egypt', zoom = 12)
library(meRcury)
library('dplyr')
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library('RNetLogo')
install.packages("RNetLogo")
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library('RNetLogo')
setwd(choose.dir(default = "C:/Program Files/NetLogo 6.0.4"))
setwd("C:/Program Files/NetLogo 6.0.4")
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path)
setwd("C:/Program Files/NetLogo 6.0.4")
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path)
library('RNetLogo')
library('dplyr')
setwd("C:/Program Files/NetLogo 6.0.4")
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path)
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library('RNetLogo')
library('dplyr')
setwd('C:/Program Files/NetLogo 6.0.4')
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path)
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library(RNetLogo)
library(dplyr)
setwd('C:/Program Files/NetLogo 6.0.4')
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path)
library(rJava)
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library(RNetLogo)
library(dplyr)
library(rJava)
setwd('C:/Program Files/NetLogo 6.0.4')
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path)
install.packages("rJava")
install.packages("rJava")
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library(RNetLogo)
library(dplyr)
library(rJava)
setwd('C:/Program Files/NetLogo 6.0.4')
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path)
library(RNetLogo)
library(dplyr)
library(rJava)
?NLStart
setwd('C:/Program Files/NetLogo 6.0.4')
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path)
install.packages("RNetLogo")
install.packages("RNetLogo")
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library(RNetLogo)
library(dplyr)
library(rJava)
setwd('C:/Program Files/NetLogo 6.0.4')
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path)
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library(RNetLogo)
library(dplyr)
library(rJava)
setwd('C:/Program Files/NetLogo 6.0.4')
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path, nl.jarname = "netlogo-6.0.4.jar")
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library(RNetLogo)
library(dplyr)
setwd("C:/Program Files/NetLogo 6.0.4/app")
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
#NLStart(nl.path, nl.jarname = "netlogo-6.0.4.jar")
NLStart(nl.path)
###This loads a specific model saved on your computer
NLLoadModel('C:/Users/Harold/Documents/CSS/CSS Spatial ABM/Food Desert ABM/Food Desert ABM v11.nlogo')
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library(RNetLogo)
library(dplyr)
library(rJava)
setwd("C:/Program Files/NetLogo 6.0.4/app")
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path, nl.jarname = "netlogo-6.0.4.jar")
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library(RNetLogo)
library(dplyr)
library(rJava)
setwd("C:/Program Files/NetLogo 5.3.1")
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
#NLStart(nl.path, nl.jarname = "netlogo-6.0.4.jar")
NLStart(nl.path)
###Need to install the required package and then load and attach the package
#install.packages("RNetLogo")
library(RNetLogo)
library(dplyr)
library(rJava)
setwd("C:/Program Files/NetLogo 5.3.1/app")
#setwd('C:/Users/Harold/Documents/CSS/CSS600')
###This code starts the NetLogo GUI
nl.path <- getwd()
NLStart(nl.path, nl.jarname = "netlogo-6.0.4.jar")
load("~/Mercury/Mercury Project - Code and Data/Data/Egypt_PPLAPI_Data_1500.RData")
View(EgyptPop)
?plot()
hist(EgyptPop$openness)
hist(EgyptPop$extraversion)
hist(EgyptPop$agreeableness)
hist(EgyptPop$income)
hist(EgyptPop$income, breaks = 100)
hist(EgyptPop$income, breaks = 1000)
hist(EgyptPop$income, breaks = 10)
hist(EgyptPop$income, breaks = 30)
x <- hist(EgyptPop$income, breaks = 30)
x$density
sum(x$density)
sum(x$density *100)
table(EgyptPop$internet)
plot(x = EgyptPop$longitude, EgyptPop$latitude)
x <- hist(EgyptPop$inco, breaks = 30)x
Sys.Date()
class(EgyptPop$date_of_birth)
as.Date(EgyptPop$date_of_birth)
hist(Sys.Date() - as.Date(EgyptPop$date_of_birth))
Sys.Date() - as.Date(EgyptPop$date_of_birth)
hist(Sys.Date() - as.Date(as.character(EgyptPop$date_of_birth)))
Sys.Date() - as.Date(as.character(EgyptPop$date_of_birth))
hist(EgyptPop$date_of_birth)
hist(table(EgyptPop$date_of_birth))
hist(table(as.character(EgyptPop$date_of_birth)))
hist(table(as.Date(as.character(EgyptPop$date_of_birth))))
x <- as.Date(as.character(EgyptPop$date_of_birth)))
x <- as.Date(as.character(EgyptPop$date_of_birth))
x <- as.Date(as.character(EgyptPop$date_of_birth, for))
?as.Date
View(EgyptPop)
x - Sys.Date()
hist(x - Sys.Date())
class(x - Sys.Date())
hist(as.numeric(x - Sys.Date()))
mean(as.numeric(x - Sys.Date()))
mean(as.numeric(x - Sys.Date())) / 365
max(as.numeric(x - Sys.Date())) / 365
min(as.numeric(x - Sys.Date())) / 365
library(shiny); runApp('~/AFFIAR/affiar_shiny/appDemo.R')
runApp('~/AFFIAR/affiar_shiny/appDemo.R')
names(MasterFile)
library(shiny); runApp('~/AFFIAR/affiar_shiny/appDemo.R')
library(shiny); runApp('~/AFFIAR/affiar_shiny/appDemo.R')
library(shiny); runApp('~/AFFIAR/affiar_shiny/appDemo.R')
load("~/AFFIAR/ExampleSampleForDemoData.RData")
library(shiny); runApp('~/AFFIAR/affiar_shiny/appDemo.R')
runApp('~/AFFIAR/affiar_shiny/app2.R')
load("~/AFFIAR/ExampleSampleForDemoData.RData")
library(shiny); runApp('~/AFFIAR/affiar_shiny/appDemo.R')
runApp('~/AFFIAR/affiar_shiny/appDemo.R')
runApp('~/AFFIAR/affiar_shiny/appDemo.R')
runApp('~/AFFIAR/affiar_shiny/appDemo.R')
runApp('~/AFFIAR/affiar_shiny/appDemo.R')
AFFR.UOT::CleanDEAMSFile
?CleanDEAMSFile
runApp('~/AFFIAR/affiar_shiny/appDemo.R')
TCodeAnalysis
runApp('~/AFFIAR/affiar_shiny/appDemo.R')
1/604
1/604 * 100
library(meRcury)
load("~/GDELT REPO/sep1_10.RData")
meRcury::ExtractEGYPT(GDELTData = sep1_10)
write.csv(EgyptData, file = "C:/Users/hwalbert001/Documents/Mercury/Egypt GDELT Data/sep1_10Unexpanded.csv", row.names = F)
load("~/GDELT REPO/sep11_18.RData")
library(meRcury)
ExtractEGYPT(GDELTData = s11_18, writeResults = T)
write.csv(EgyptData, file = "C:/Users/hwalbert001/Documents/Mercury/Egypt GDELT Data/sep11_18Unexpanded.csv", row.names = F)
names(s11_18)
ExpandEgypt(EgyptData = EgyptData)
load("~/AFFIAR/ExampleSampleForDemoData.RData")
library(shiny); runApp('~/AFFIAR/affiar_shiny/appDemo.R')
runApp('~/AFFIAR/affiar_shiny/appDemo.R')
20000*1.5
20000*1
9/14
10/14
20*.8
26/40
30*.8
34/50
60*.8
48/80
58/80
90/110
28/40
40*.9
46/60
.9*50
55/75
55/70
56/9
19/30
46/60
55/70
64/80
runApp('~/AFFIAR/affiar_shiny/appDemo.R')
load("~/AFFIAR/ExampleSampleForDemoData.RData")
library(shiny); runApp('~/AFFIAR/affiar_shiny/appDemo.R')
cars
View(cars)
?cars
linearMod <- lm(dist ~ speed, data=cars)
linearMod
summary(linearMod)
SimpleRegression <- lm(dist ~ speed, data=cars)
SimpleRegression
summary(SimpleRegression)
cor(cars$speed, cars$dist)
cor(cars$speed, sort(cars$dist))
cor(sort(cars$speed), sort(cars$dist))
cor(sort(cars$speed), sort(cars$dist, desc()))
?sort
cor(sort(cars$speed), sort(cars$dist, decreasing = T)
cor(sort(cars$speed), sort(cars$dist, decreasing = T))
load("~/AFFIAR/ExampleSampleForDemoData.RData")
load("~/AFFIAR/ExampleSampleForDemoData.RData")
runApp('~/AFFIAR/affiar_shiny/appDemo.R')
