n.month <- (12*d.year) + d.month
#################   CIVIL UNREST   #################
# Pull from Github Mercury Page
# ~ 1 minute for full pull (3 years ofdata)
v.names <- character(1)
for ( i  in 0:n.month ) {
i.month <- month.name[( ( month(start.dt) + i ) %% 12 )]
if( ( ( month(start.dt) + i ) %% 12 ) == 0 ) {
i.month <- month.name[12]
}
i.year <- year(start.dt) + floor( ( month(start.dt) + i ) / 12.001)
i.url <- paste0("https://raw.githubusercontent.com/planetmercury/mercury-challenge/master/data/gsr/cu_gsr/CU_",
i.month, "_", i.year, ".json")
#print(i.url)
v.names[i+1] <- paste0("GSR.CU.", i.year, i.month)
assign(x = v.names[i+1], value = fromJSON(i.url))
}
# Combine each month of GSR Data
df.GSR.CU.Full <- get(x = v.names[1])
for (name in v.names[-1] ) {
df.GSR.CU.Full <- rbind(df.GSR.CU.Full, get(x = name) )
}
return(df.GSR.CU.Full)
}
# Remove each month's df
# rm(list = v.names)
# rm(v.names)
#####################    MILITARY ACTION    ##########################
# PUll from Github Mercury Page
# ~ 1 minute for full pull (3 years ofdata)
Get_GSR_MA_Data <- function(){
start.dt <- as.Date("2015-05-01")
end.dt <- as.Date(Sys.Date())
d.year <- year(end.dt) - year(start.dt)
d.month <- month(end.dt) - month(start.dt)
n.month <- (12*d.year) + d.month
v.names <- character(1)
for ( i  in 0:n.month ) {
i.month <- month.name[( ( month(start.dt) + i ) %% 12 )]
if( ( ( month(start.dt) + i ) %% 12 ) == 0 ) {
i.month <- month.name[12]
}
i.year <- year(start.dt) + floor( ( month(start.dt) + i ) / 12.001)
i.url <- paste0("https://raw.githubusercontent.com/planetmercury/mercury-challenge/master/data/gsr/ma_gsr/MA_",
i.month, "_", i.year, ".json")
#print(i.url)
v.names[i+1] <- paste0("GSR.MA.", i.year, i.month)
assign(x = v.names[i+1], value = fromJSON(i.url))
}
# Combine each month of GSR Data
df.GSR.MA.Full <- get(x = v.names[1])
for (name in v.names[-1] ) {
df.GSR.MA.Full <- rbind(df.GSR.MA.Full, get(x = name) )
}
return(df.GSR.MA.Full)
# Remove each month's df
#rm(list = v.names)
#rm(c(v.names, d.year, d.month, end.dt, i, i.month, i.year, i.url, n.month, start.dt, end.dt, name) )
}
Get_GSR_CU_Data()
CUData <- Get_GSR_CU_Data()
View(CUData)
Get_GSR_CU_Data <- function(){
# Date setup
start.dt <- as.Date("2015-05-01")
end.dt <- as.Date(Sys.Date() - 14)#Need way to make sure we pull data for dates that are in the dataset, otherwise error
d.year <- year(end.dt) - year(start.dt)
d.month <- month(end.dt) - month(start.dt)
n.month <- (12*d.year) + d.month
#################   CIVIL UNREST   #################
# Pull from Github Mercury Page
# ~ 1 minute for full pull (3 years ofdata)
v.names <- character(1)
for ( i  in 0:n.month ) {
i.month <- month.name[( ( month(start.dt) + i ) %% 12 )]
if( ( ( month(start.dt) + i ) %% 12 ) == 0 ) {
i.month <- month.name[12]
}
i.year <- year(start.dt) + floor( ( month(start.dt) + i ) / 12.001)
i.url <- paste0("https://raw.githubusercontent.com/planetmercury/mercury-challenge/master/data/gsr/cu_gsr/CU_",
i.month, "_", i.year, ".json")
#print(i.url)
v.names[i+1] <- paste0("GSR.CU.", i.year, i.month)
assign(x = v.names[i+1], value = fromJSON(i.url))
}
# Combine each month of GSR Data
df.GSR.CU.Full <- get(x = v.names[1])
for (name in v.names[-1] ) {
df.GSR.CU.Full <- rbind(df.GSR.CU.Full, get(x = name) )
}
return(df.GSR.CU.Full)
}
# Remove each month's df
# rm(list = v.names)
# rm(v.names)
#####################    MILITARY ACTION    ##########################
# PUll from Github Mercury Page
# ~ 1 minute for full pull (3 years ofdata)
Get_GSR_MA_Data <- function(){
start.dt <- as.Date("2015-05-01")
end.dt <- as.Date(Sys.Date() - 14)
d.year <- year(end.dt) - year(start.dt)
d.month <- month(end.dt) - month(start.dt)
n.month <- (12*d.year) + d.month
v.names <- character(1)
for ( i  in 0:n.month ) {
i.month <- month.name[( ( month(start.dt) + i ) %% 12 )]
if( ( ( month(start.dt) + i ) %% 12 ) == 0 ) {
i.month <- month.name[12]
}
i.year <- year(start.dt) + floor( ( month(start.dt) + i ) / 12.001)
i.url <- paste0("https://raw.githubusercontent.com/planetmercury/mercury-challenge/master/data/gsr/ma_gsr/MA_",
i.month, "_", i.year, ".json")
#print(i.url)
v.names[i+1] <- paste0("GSR.MA.", i.year, i.month)
assign(x = v.names[i+1], value = fromJSON(i.url))
}
# Combine each month of GSR Data
df.GSR.MA.Full <- get(x = v.names[1])
for (name in v.names[-1] ) {
df.GSR.MA.Full <- rbind(df.GSR.MA.Full, get(x = name) )
}
return(df.GSR.MA.Full)
# Remove each month's df
#rm(list = v.names)
#rm(c(v.names, d.year, d.month, end.dt, i, i.month, i.year, i.url, n.month, start.dt, end.dt, name) )
}
MAData <- Get_GSR_MA_Data()
#Connect to GSR Civil Unrest counts
CUData <- Get_GSR_CU_Data()
MAData <- Get_GSR_MA_Data()
unique(CUData$Country)
#Filter CU and MA data for only Egypt
CUDataEgypt <- subset(CUData, Country == "Egypt")
unique(MAData$Country)
MADataEgypt <- subset(MAData, Country == "Egypt")
View(CUDataEgypt)
CUDataEgypt2 <- summarize(group_by(CUDataEgypt, Event_Date), COUNT = n())
View(CUDataEgypt2)
MADataEgypt2 <- summarize(group_by(MADataEgypt, Event_Date), COUNT = n())
names(MasterFile)
#' Title
#'
#' @return
#' @export
#'
#' @examples
Aggregate_GDELT <- function(){
HistoricalData <- fread(file = "~/GitHub/GiveMercuryAMoon/Data/GDELT_EGYPT.csv")
HistoricalData$Date <- NULL
GDELTData <- GetGDELT()
GDELTData[] <- lapply(GDELTData[], as.character)
AllEgyptGDELTData <- rbind(HistoricalData, GDELTData)
AllEgyptGDELTData$Date <- substr(AllEgyptGDELTData$dateTimeDocument, 1, 10)
AllEgyptGDELTData$Date <- as.Date(AllEgyptGDELTData$Date, format = "%Y-%m-%d")
#AllEgyptGDELTData <<- AllEgyptGDELTData
return(AllEgyptGDELTData)
}
dates <- Check_GDELT_Dates()
dates <- Check_GDELT_Dates()
Sys.Date()
max(dates) == Sys.Date()
#Read in the current historical data for GDELT
AllGDELT <- fread(file = "~/GitHub/GiveMercuryAMoon/Data/GDELT_EGYPT.csv")
#Fix the Date column
AllGDELT$Date <- as.Date(AllGDELT$Date, format = "%Y-%m-%d")
#Get the list of all unique dates in the dataset
dates <- unique(AllGDELT$Date)
max(dates) == Sys.Date()
NewDatesNeeded <- as.Date("")
library(meRcury)
meRcury::GetGDELT()
#' @param DaysBack
#'
#' @param writeResults
#' @param SpecificDates
#' @param location
#'
#' @title ETL Egypt GDELT data
#' @description A giant loop that downloads gdelt data for a given month, extracts the egypt related info, combines it, saves it to a master folder, and deletes them if all of the above is done successfully
#'
#' @return Returns a data frame to the global environment showing the debit/credit results.
#' @examples DebitCreditCompare(MasterFile)
GetGDELT <- function(DaysBack = NULL, writeResults = T, location = "~/GitHub/GiveMercuryAMoon/Data", Engine = "Egypt"){
cat("Preparing the Full Global Knowledge Graph \n")
if(!is.null(DaysBack)){
dates = DatesForGDELT(daysBack = DaysBack)
}else{
dates <- Check_GDELT_Dates()
if(is.null(dates)){stop("No new dates needed in the GDELT data pull.")}
}
#This code grabs the Global Knowledge Graph data for the dates specified by the DatesForGDELT() function
GDELTData <-
suppressMessages(get_data_gkg_days_detailed(
dates = dates,
# dates = c("2018-09-08"),
table_name = 'gkg',
return_message = T
))
if(nrow(GDELTData) < 1){stop("The pulled GDELT Data has no rows.")}
if(Engine == "Egypt"){
GDELTData<-ExtractEGYPT(GDELTData)
#dates <- gsub("-", "_", dates)
if(writeResults==T){
FolderForResults <- location
fwrite(GDELTData, file = paste(FolderForResults, "/GDELTDataDate", dates, ".csv", sep = ""))
}
}
return(GDELTData)
}
Check_GDELT_Dates <- function(){
#Read in the current historical data for GDELT
AllGDELT <- fread(file = "~/GitHub/GiveMercuryAMoon/Data/GDELT_EGYPT.csv")
#Fix the Date column
AllGDELT$Date <- as.Date(AllGDELT$Date, format = "%Y-%m-%d")
#Get the list of all unique dates in the dataset
dates <- unique(AllGDELT$Date)
#We want the list of current dates not in the dataset
if(max(dates) == Sys.Date()){
NewDatesNeeded <- ""
}else{
NewDatesNeeded <- as.Date(max(dates):Sys.Date(), format = "%Y-%m-%d", origin = "1970-01-01")
}
return(NewDatesNeeded)
}
#GetGDELT(SpecificDates = NewDatesNeeded, Engine = "Egypt")
GetGDELT()
#' @param DaysBack
#'
#' @param writeResults
#' @param SpecificDates
#' @param location
#'
#' @title ETL Egypt GDELT data
#' @description A giant loop that downloads gdelt data for a given month, extracts the egypt related info, combines it, saves it to a master folder, and deletes them if all of the above is done successfully
#'
#' @return Returns a data frame to the global environment showing the debit/credit results.
#' @examples DebitCreditCompare(MasterFile)
GetGDELT <- function(DaysBack = NULL, writeResults = T, location = "~/GitHub/GiveMercuryAMoon/Data", Engine = "Egypt"){
cat("Preparing the Full Global Knowledge Graph \n")
if(!is.null(DaysBack)){
dates = DatesForGDELT(daysBack = DaysBack)
}else{
dates <- Check_GDELT_Dates()
if(is.null(dates)){return(cat("No new dates needed in the GDELT data pull. \n"))}
}
#This code grabs the Global Knowledge Graph data for the dates specified by the DatesForGDELT() function
GDELTData <-
suppressMessages(get_data_gkg_days_detailed(
dates = dates,
# dates = c("2018-09-08"),
table_name = 'gkg',
return_message = T
))
if(nrow(GDELTData) < 1){stop("The pulled GDELT Data has no rows.")}
if(Engine == "Egypt"){
GDELTData<-ExtractEGYPT(GDELTData)
#dates <- gsub("-", "_", dates)
if(writeResults==T){
FolderForResults <- location
fwrite(GDELTData, file = paste(FolderForResults, "/GDELTDataDate", dates, ".csv", sep = ""))
}
}
return(GDELTData)
}
GetGDELT()
HistoricalData <- fread(file = "~/GitHub/GiveMercuryAMoon/Data/GDELT_EGYPT.csv")
HistoricalData$Date <- NULL
GDELTData <- GetGDELT()
#' @param DaysBack
#'
#' @param writeResults
#' @param SpecificDates
#' @param location
#'
#' @title ETL Egypt GDELT data
#' @description A giant loop that downloads gdelt data for a given month, extracts the egypt related info, combines it, saves it to a master folder, and deletes them if all of the above is done successfully
#'
#' @return Returns a data frame to the global environment showing the debit/credit results.
#' @examples DebitCreditCompare(MasterFile)
GetGDELT <- function(DaysBack = NULL, writeResults = T, location = "~/GitHub/GiveMercuryAMoon/Data", Engine = "Egypt"){
cat("Preparing the Full Global Knowledge Graph \n")
if(!is.null(DaysBack)){
dates = DatesForGDELT(daysBack = DaysBack)
}else{
dates <- Check_GDELT_Dates()
if(is.null(dates)){return(data.frame())}
}
#This code grabs the Global Knowledge Graph data for the dates specified by the DatesForGDELT() function
GDELTData <-
suppressMessages(get_data_gkg_days_detailed(
dates = dates,
# dates = c("2018-09-08"),
table_name = 'gkg',
return_message = T
))
if(nrow(GDELTData) < 1){stop("The pulled GDELT Data has no rows.")}
if(Engine == "Egypt"){
GDELTData<-ExtractEGYPT(GDELTData)
#dates <- gsub("-", "_", dates)
if(writeResults==T){
FolderForResults <- location
fwrite(GDELTData, file = paste(FolderForResults, "/GDELTDataDate", dates, ".csv", sep = ""))
}
}
return(GDELTData)
}
GetGDELT()
#' @param DaysBack
#'
#' @param writeResults
#' @param SpecificDates
#' @param location
#'
#' @title ETL Egypt GDELT data
#' @description A giant loop that downloads gdelt data for a given month, extracts the egypt related info, combines it, saves it to a master folder, and deletes them if all of the above is done successfully
#'
#' @return Returns a data frame to the global environment showing the debit/credit results.
#' @examples DebitCreditCompare(MasterFile)
GetGDELT <- function(DaysBack = NULL, writeResults = T, location = "~/GitHub/GiveMercuryAMoon/Data", Engine = "Egypt"){
cat("Preparing the Full Global Knowledge Graph \n")
if(!is.null(DaysBack)){
dates = DatesForGDELT(daysBack = DaysBack)
}else{
dates <- Check_GDELT_Dates()
if(is.null(dates)){return(data.frame())}
}
#This code grabs the Global Knowledge Graph data for the dates specified by the DatesForGDELT() function
GDELTData <-
suppressMessages(get_data_gkg_days_detailed(
dates = dates,
# dates = c("2018-09-08"),
table_name = 'gkg',
return_message = T
))
if(nrow(GDELTData) < 1){stop("The pulled GDELT Data has no rows.")}
if(Engine == "Egypt"){
GDELTData<-ExtractEGYPT(GDELTData)
#dates <- gsub("-", "_", dates)
if(writeResults==T){
FolderForResults <- location
fwrite(GDELTData, file = paste(FolderForResults, "/GDELTDataDate", dates, ".csv", sep = ""))
}
}
return(GDELTData)
}
GetGDELT()
library(meRcury)
#' @param DaysBack
#'
#' @param writeResults
#' @param SpecificDates
#' @param location
#'
#' @title ETL Egypt GDELT data
#' @description A giant loop that downloads gdelt data for a given month, extracts the egypt related info, combines it, saves it to a master folder, and deletes them if all of the above is done successfully
#'
#' @return Returns a data frame to the global environment showing the debit/credit results.
#' @examples DebitCreditCompare(MasterFile)
GetGDELT <- function(DaysBack = NULL, writeResults = T, location = "~/GitHub/GiveMercuryAMoon/Data", Engine = "Egypt"){
cat("Preparing the Full Global Knowledge Graph \n")
if(!is.null(DaysBack)){
dates = DatesForGDELT(daysBack = DaysBack)
}else{
dates <- Check_GDELT_Dates()
if(is.null(dates)){return(data.frame())}
}
#This code grabs the Global Knowledge Graph data for the dates specified by the DatesForGDELT() function
GDELTData <-
suppressMessages(get_data_gkg_days_detailed(
dates = dates,
# dates = c("2018-09-08"),
table_name = 'gkg',
return_message = T
))
#if(nrow(GDELTData) < 1){stop("The pulled GDELT Data has no rows.")}
if(Engine == "Egypt"){
GDELTData<-ExtractEGYPT(GDELTData)
#dates <- gsub("-", "_", dates)
if(writeResults==T){
FolderForResults <- location
fwrite(GDELTData, file = paste(FolderForResults, "/GDELTDataDate", dates, ".csv", sep = ""))
}
}
return(GDELTData)
}
GetGDELT()
#' @param DaysBack
#'
#' @param writeResults
#' @param SpecificDates
#' @param location
#'
#' @title ETL Egypt GDELT data
#' @description A giant loop that downloads gdelt data for a given month, extracts the egypt related info, combines it, saves it to a master folder, and deletes them if all of the above is done successfully
#'
#' @return Returns a data frame to the global environment showing the debit/credit results.
#' @examples DebitCreditCompare(MasterFile)
GetGDELT <- function(DaysBack = NULL, writeResults = T, location = "~/GitHub/GiveMercuryAMoon/Data", Engine = "Egypt"){
cat("Preparing the Full Global Knowledge Graph \n")
if(!is.null(DaysBack)){
dates = DatesForGDELT(daysBack = DaysBack)
}else{
dates <- Check_GDELT_Dates()
if(dates == ""){return(data.frame())}
}
#This code grabs the Global Knowledge Graph data for the dates specified by the DatesForGDELT() function
GDELTData <-
suppressMessages(get_data_gkg_days_detailed(
dates = dates,
# dates = c("2018-09-08"),
table_name = 'gkg',
return_message = T
))
#if(nrow(GDELTData) < 1){stop("The pulled GDELT Data has no rows.")}
if(Engine == "Egypt"){
GDELTData<-ExtractEGYPT(GDELTData)
#dates <- gsub("-", "_", dates)
if(writeResults==T){
FolderForResults <- location
fwrite(GDELTData, file = paste(FolderForResults, "/GDELTDataDate", dates, ".csv", sep = ""))
}
}
return(GDELTData)
}
GetGDELT()
GDELTData <- GetGDELT()
GDELTData[] <- lapply(GDELTData[], as.character)
AllEgyptGDELTData <- rbind(HistoricalData, GDELTData)
HistoricalData <- fread(file = "~/GitHub/GiveMercuryAMoon/Data/GDELT_EGYPT.csv")
HistoricalData$Date <- NULL
GDELTData <- GetGDELT()
GDELTData[] <- lapply(GDELTData[], as.character)
AllEgyptGDELTData <- rbind(HistoricalData, GDELTData)
AllEgyptGDELTData$Date <- substr(AllEgyptGDELTData$dateTimeDocument, 1, 10)
AllEgyptGDELTData$Date <- as.Date(AllEgyptGDELTData$Date, format = "%Y-%m-%d")
#AllEgyptGDELTData <<- AllEgyptGDELTData
return(AllEgyptGDELTData)
library(meRcury)
AllEgyptGDELTData <- Aggregate_GDELT()
#Connect Egypt GDELT data to Holiday and weekend data
MasterFile <- merge(AllEgyptGDELTData, EgyptHolidays, by = "Date", all.x = T)
#Connect to GSR Civil Unrest counts
CUData <- Get_GSR_CU_Data()
MAData <- Get_GSR_MA_Data()
#Filter CU and MA data for only Egypt
CUDataEgypt <- subset(CUData, Country == "Egypt")
MADataEgypt <- subset(MAData, Country == "Egypt")
CUDataEgypt2 <- summarize(group_by(CUDataEgypt, Event_Date), COUNT = n())
MADataEgypt2 <- summarize(group_by(MADataEgypt, Event_Date), COUNT = n())
library(meRcury)
2
AllEgyptGDELTData <- Aggregate_GDELT()
#Connect Egypt GDELT data to Holiday and weekend data
MasterFile <- merge(AllEgyptGDELTData, EgyptHolidays, by = "Date", all.x = T)
#Connect to GSR Civil Unrest counts
CUData <- Get_GSR_CU_Data()
MAData <- Get_GSR_MA_Data()
#Filter CU and MA data for only Egypt
CUDataEgypt <- subset(CUData, Country == "Egypt")
MADataEgypt <- subset(MAData, Country == "Egypt")
CUDataEgypt2 <- summarize(group_by(CUDataEgypt, Event_Date), COUNT = n())
MADataEgypt2 <- summarize(group_by(MADataEgypt, Event_Date), COUNT = n())
names(MasterFile)
names(CUDataEgypt2)
View(CUDataEgypt2)
View(MasterFile)
CUDataEgypt$Event_Date <- as.Date(CUDataEgypt$Event_Date, format = "%Y-%m-%d")
CUDataEgypt <- summarize(group_by(CUDataEgypt, Event_Date), COUNT = n())
CUDataEgypt$Event_Date <- as.Date(CUDataEgypt$Event_Date, format = "%Y-%m-%d")
str(CUDataEgypt
str(CUDataEgypt)
names(CUDataEgypt)[1]
names(CUDataEgypt)[1] <- "Date"
MasterFile <- merge(MasterFile, CUDataEgypt2, by = "Date")
MasterFile <- merge(MasterFile, CUDataEgypt, by = "Date")
MasterFile <- merge(AllEgyptGDELTData, EgyptHolidays, by = "Date", all.x = T)
#Connect to GSR Civil Unrest counts
CUData <- Get_GSR_CU_Data()
MAData <- Get_GSR_MA_Data()
#Filter CU and MA data for only Egypt
CUDataEgypt <- subset(CUData, Country == "Egypt")
MADataEgypt <- subset(MAData, Country == "Egypt")
CUDataEgypt <- summarize(group_by(CUDataEgypt, Event_Date), COUNT = n())
CUDataEgypt$Event_Date <- as.Date(CUDataEgypt$Event_Date, format = "%Y-%m-%d")
names(CUDataEgypt)[1] <- "Date"
MasterFile <- merge(MasterFile, CUDataEgypt, by = "Date", all.x = T)
#Connect Egypt GDELT data to Holiday and weekend data
MasterFile <- merge(AllEgyptGDELTData, EgyptHolidays, by = "Date", all.x = T)
#Connect Egypt GDELT data to Holiday and weekend data
MasterFile <- merge(AllEgyptGDELTData, EgyptHolidays, by = "Date", all.x = T)
#Connect Egypt GDELT data to Holiday and weekend data
MasterFile <- merge(AllEgyptGDELTData, EgyptHolidays, by = "Date", all = T)
2
Combine_MasterFile()
2
CurrentData <- Combine_MasterFile()
View(CurrentData)
AllEgyptGDELTData <- Aggregate_GDELT()
AllEgyptGDELTData <- Aggregate_GDELT()
View(AllEgyptGDELTData)
# Each row is one day...
all.days <- seq.Date(from = min(GSR.CU$Event_Date), to = max(GSR.CU$Event_Date), by = 1)
AllEgyptGDELTData <- Aggregate_GDELT()
#Connect Egypt GDELT data to Holiday and weekend data
MasterFile <- merge(AllEgyptGDELTData, EgyptHolidays, by = "Date", all = T)
AllEgyptGDELTData <- Aggregate_GDELT()
# Each row is one day...
all.days <- seq.Date(from = min(AllEgyptGDELTData$Date), to = max(AllEgyptGDELTData$Date), by = 1)
#Connect to GSR Civil Unrest counts
CUData <- Get_GSR_CU_Data()
MAData <- Get_GSR_MA_Data()
