
library(AFFR.UOT)
library(shiny)
library(shinyjs)
options(scipen = 9999)
library("openxlsx")

rm(list = ls()); gc()

tcodes <- c()
#IssueCodes <- c()

#shortened version of QDD_Summary_Stats
#doesn't include tcode compliance because this is used right after reading the file in
QDD_Summary_Shiny <- function(MasterFile = MasterFile){
  measures <- c("Month & Fiscal Year", "Transaction Count","Num Without Interface", "Num With Interface", "4-digit GLAC Count",
                "System Count", "Operating Entity Count", "Funding Base Count", "TCode Count")
  period <- unique(MasterFile$Period.Name)

  if(length(period) > 1) { period <- paste(unique(MasterFile$Period.Name), collapse = ", ") }
  values <- c(period, nrow(MasterFile), sum(MasterFile$Interface.Source.Code == ""), sum(MasterFile$Interface.Source.Code != ""),
              length(unique(MasterFile$GLAC)),
              length(unique(MasterFile$FinalSourceSystem)) + length(unique(MasterFile$FY18SS)),
              length(unique(MasterFile$Operating.Entity)),
              length(unique(MasterFile$FundingBase)), length(unique(MasterFile$TCode)))
  summary_stats <- data.frame(Measure = measures, Value = values)
  return(summary_stats)
}

server <- shinyServer(function(input, output, session) {

  # suppress warnings
  storeWarn<- getOption("warn")
  options(warn = -1)

  #these vectors will be used to store messages
  #they act as global variables inside the shiny session
  clean_values <- reactiveValues()
  tb_values <- reactiveValues()
  tcode_values <- reactiveValues()
  #need this to update tie point results
  tp_results <- reactiveValues(df_data = NULL)
  tp_comparison <- reactiveValues(df_data = NULL)
  #print message if limestone trial balance isn't available
  li_tp_print <- reactiveValues()


  #qdd_summary <- reactiveTable()
  qdd_summary <- c()

  observeEvent(input$importData,{
    #only want to run this function once in a session
    #capture.output is used frequently to mute the regular print statements and customize what appears in shiny
    withProgress(message = 'Reading and cleaning file...',
                 detail = 'Thank you for your patience.', value = 0, {

                   if(!exists("MasterFile"))
                     output <- capture.output(CleanDEAMSFile())
                 })
    if(exists("MasterFile")){
      updateSelectInput(session, "glac_select", choices = sort(unique(MasterFile$GLAC)))
      updateSelectInput(session, "field_2_select", choices = sort(unique(MasterFile$JE.Source)))
      updateSelectInput(session, "field_3_select", choices = sort(unique(MasterFile$JE.Category)))
      updateSelectInput(session, "field_5_select", choices = sort(unique(MasterFile$Attribute.Category)))
      updateSelectInput(session, "field_8_select", choices = sort(unique(MasterFile$Interface.Source.Code)))
      updateSelectInput(session, "fund_code_select", choices = sort(unique(MasterFile$FundCode)))
      #updateSelectInput(session, "compliance_select", choices = sort(unique(MasterFile$TC_Result)))
      updateSelectInput(session, "group_select", choices = sort(unique(MasterFile$Account_Group)))
      updateSelectInput(session, "date_select", choices = sort(unique(MasterFile$Transaction.Post.Date)))
      updateSelectInput(session, "tc_select", choices = sort(unique(MasterFile$TCode)))



      mon <- unique(MasterFile$Period.Name)
      FYMonth <<- mon
      #this is what we want to appear on the interface
      clean_values[["log"]] <- capture.output(cat(paste("Transactional data from", mon, "has", nrow(MasterFile), "rows. \n")))
    }
  })


  #runs when importdata button is clicked
  observeEvent(input$importData,{
    if(exists("MasterFile")){

      #outputs text to explain table
      output$transplotdesc <- renderText({
        return("The plot below shows the transaction count over time.")
      })
      output$transactions <- renderPlot({
        #plots transactions over time by transaction count
        plot((TransactionsOverTime(MasterFile = MasterFile,showDollars = F)))

      })
      #outputs text to explain table
      output$dollarsplotdesc <- renderText({
        return("The plot below shows the daily dollar amount over time.")
      })
      output$dollars <- renderPlot({
        #plots transactions over time by dollar amount
        plot((TransactionsOverTime(MasterFile = MasterFile,showDollars = T)))
      })
      #outputs text to explain table
      output$datatabledesc <- renderText({
        return("The table below contains summary statistics on the selected data set.")
      })
      #creates qdd summary table about master file
      output$qdd <- renderTable({
        #this depends on cleandeamsfile being run

        if(exists("MasterFile"))
          qdd_summary <- QDD_Summary_Shiny(MasterFile = MasterFile)
        else
          qdd_summary <- c()

        return(qdd_summary)
      })
    }
  })

  output$clean <- renderText({
    #cleanButton()
    #we can simply grab the most recent value in that values vector
    #the benefit of using this vector is we don't have to call cleanButton() twice
    return(print(clean_values[["log"]]))
  })



  tcodeButton <- eventReactive(input$tcodeRun, {
    withProgress(message = 'Running T-Code Analysis...',
                 value = 0, {
                   op <- capture.output(TCodeAnalysis(MasterFile = MasterFile, printOption = F))
                 })
    #summary statement is at the very end of the output list
    tcode_values[["log"]] <- op[length(op)]
    return(IssueCodes)
  })

  output$tcodeoverview <- renderText({
    #tcodeButton()
    return(print(tcode_values[["log"]]))
  })

  output$issuecodes <- renderDataTable({
    #only grab the most pertinent columns
    issue_table <- tcodeButton()[,c("TCode", "NumTransactions", "BadLineCount", "NumObservedGLAC", "NumAllowedGLAC", "NumBadGLACs")]
    issue_table$Percent_Bad <- paste0(round(100 * issue_table$BadLineCount/issue_table$NumTransactions, 2), "%")

    names(issue_table) <- c("T-Code", "Total Transactions", "Noncompliant Transactions", "Observed GLACs", "Allowed GLACs", "Noncompliant GLACs", "Percent Noncompliant")
    issue_table <- issue_table[,c(1:3,7,4:6)]
    return(issue_table)
  })

  checkButton <- eventReactive(input$checktcode, {
    return(capture.output(checkTCode(input$tcode)))
    #input$tcode
  })

  output$checkop <- renderText({
    op <- checkButton()
    paste(op[2], op[3], op[4], op[5], op[6], op[7], op[8], op[9], op[10], op[11], op[12], sep = "\n")
  })

  tbButton <- eventReactive(input$tbRec, {
    #automatically determine names of tb tables
    my <- MasterFile$Period.Name[1]
    mon <- tolower(substr(my, 1, 3))
    mon <- paste0(toupper(substr(mon, 1, 1)), substr(mon, 2, 3))
    yr <- substr(my, nchar(my) - 1, nchar(my))

    #check to see which trial balance tables we have
    #call function & store output accordingly
    #if we have both FMO and LI...

    withProgress(message = 'Performing trial balance reconciliation...',
                 value = 0, {

                   if(exists(paste0("TB_", mon, yr)) & exists(paste0("LI_TB_", toupper(mon), yr))){
                     fmo <- get(paste0("TB_", mon, yr))
                     li <- get(paste0("LI_TB_", toupper(mon), yr))
                     op <- capture.output(TBRecon(MasterFile, fmo, li))
                   }
                   else if(exists(paste0("TB_", mon, yr))){
                     fmo <- get(paste0("TB_", mon, yr))
                     op <- capture.output(TBRecon(MasterFile, fmo))
                   }
                   else {
                     li <- get(paste0("LI_TB_", toupper(mon), yr))
                     op <- capture.output(TBRecon(MasterFile, NULL, li))
                   }

                 })

    tb_values[["log"]] <- op

    #reformat columns and limit which ones to display
    qdd_copy <- data.frame(QDD_TB_Compare)
    qdd_copy$Normal.Account.Balance <- NULL
    #qdd_copy[2:6] <- sapply(qdd_copy[2:6], accounting)
    for(i in 2:6){qdd_copy[,i] <- accounting(qdd_copy[,i])}
    qdd_copy <- qdd_copy[, 1:6]

    names(qdd_copy) <- c("GLAC", "Debits", "Credits", "FMO TB Total", "LI TB Total", "QDD Total")

    MasterFile$GLACsix <- MasterFile$Business.Cycle <- MasterFile$Fed_NonFed <- MasterFile$UniqueLookup <- NULL
    #outputs text to explain table
    output$tbtabledesc <- renderText({
      return("The transactional data was summarized by GLAC and compared to the FMO Trial Balance and/or the Limestone trial balance. The results are in the table below.")
    })
    return(qdd_copy)
  })

  observeEvent(input$tbhide, {
    toggle("tbtable")
  })
  #
  # observeEvent(input$showData, {
  #   toggle("showDataWithSelectedColumns")
  # })

  #grab column names selected by user
  dataWithSelectedColumns <- eventReactive(input$showData, {

    #replace field numbers with actual names

    table_to_show <- MasterFile

    #table_to_show <- table_to_show[,col_names]


    #collect inputs
    glacs <- input$glac_select; f2 <- input$field_2_select; f3 <- input$field_3_select
    f5 <- input$field_5_select; f8 <- input$field_8_select; fc <- input$fund_code_select
    comp <- input$compliance_select; group <- input$group_select; f13 <- input$date_select
    dc <- as.numeric(input$dc_select); doc <- input$doc_select; f43 <- input$batch_select
    tc <- input$tc_select

    #if an input isn't selected, use all values
    if(is.null(glacs)) {glacs <- unique(MasterFile$GLAC)}
    if(is.null(f2)) {f2 <- unique(MasterFile$JE.Source)}
    if(is.null(f3)) {f3 <- unique(MasterFile$JE.Category)}
    if(is.null(f5)) {f5 <- unique(MasterFile$Attribute.Category)}
    if(is.null(f8)) {f8 <- unique(MasterFile$Interface.Source.Code)}
    if(is.null(fc)) {fc <- unique(MasterFile$FundCode)}
    if(is.null(comp) & !is.null(MasterFile$TC_Result)) {comp <- unique(MasterFile$TC_Result)}
    if(is.null(group)) {group <- unique(MasterFile$Account_Group)}
    if(is.null(f13)) {f13 <- unique(MasterFile$Transaction.Post.Date)}
    if(is.na(dc)) {dc <- unique(MasterFile$Dollars_D_C)}
    if(doc == "") {doc <- unique(MasterFile$Document.Number)}
    if(f43 == "") {f43 <- unique(MasterFile$JE.Batch.Name)}
    if(is.null(tc)) {tc <- unique(MasterFile$TCode)}

    #filter down to inputs
    #TC_Result may not have been created at this point, so we need to check
    if(!is.null(MasterFile$TC_Result)) {
      table_to_show <- subset(table_to_show, GLAC %in% glacs & JE.Source %in% f2 & JE.Category %in% f3 & Attribute.Category %in% f5 & Interface.Source.Code %in% f8 & FundCode %in% fc
                              & TC_Result %in% comp & Account_Group %in% group & Dollars_D_C %in% dc & Document.Number %in% doc & Transaction.Post.Date %in% as.Date(f13)
                              & JE.Batch.Name %in% f43 & TCode %in% tc)
    }
    else if (!is.null(MasterFile$TCode)) {
      table_to_show <- subset(table_to_show, GLAC %in% glacs & JE.Source %in% f2 & JE.Category %in% f3 & Attribute.Category %in% f5 & Interface.Source.Code %in% f8 & FundCode %in% fc
                              & Account_Group %in% group & Dollars_D_C %in% dc & Document.Number %in% doc & Transaction.Post.Date %in% as.Date(f13) & JE.Batch.Name %in% f43
                              & TCode %in% tc)
    }
    else {
      table_to_show <- subset(table_to_show, GLAC %in% glacs & JE.Source %in% f2 & JE.Category %in% f3 & Attribute.Category %in% f5 & Interface.Source.Code %in% f8 & FundCode %in% fc
                              & Account_Group %in% group & Dollars_D_C %in% dc & Document.Number %in% doc & Transaction.Post.Date %in% as.Date(f13) & JE.Batch.Name %in% f43)
    }
    col_names <- names(MasterFile)

    #rename columns instead of using field_1, etc.
    #col_names[1:54] <- names(table_to_show)[1:54] <- as.character(FieldNameXWalk$Data)

    #don't include columns that would add clutter. subject to change
    col_names <- col_names[!col_names %in% c("TCode_GLAC_ID", "UniqueLookup", "GLACsix", "FinalSourceSystem", "Dollars",
                                             "Unique_ID", "TITLE", "DESCRIPTION", "OpEnt_F", "TITLE", "DESCRIPTION", "FundingBase",
                                             "ADSN", "SiteCodeBAFSBQ")]
    table_to_show <- table_to_show[,col_names]

    return(table_to_show)
  })

  output$showDataWithSelectedColumns <- renderDataTable({
    withProgress(message = 'Fetching data...',
                 value = 0, {
                   dataWithSelectedColumns()
                 })
  })

  output$downloadData <- downloadHandler(
    filename = function() {
      paste0("DEAMS_Data_Pull", ".csv")
    },
    content = function(file) {
      write.csv(dataWithSelectedColumns(), file, row.names = FALSE)
    }
  )

  dataSummary <- eventReactive(input$showDataSummary, {
    choices <- c("GLAC", "JE Source (Field 2)", "JE Category (Field 3)", "Attribute Category (Field 5)",
                 "Interface Source Code (Field 8)", "Fund Code")
    choice_num <- which(choices %in% input$group_column)

    field_choices <- c("GLAC", "JE.Source", "JE.Category", "Attribute.Category", "Interface.Source.Code", "FundCode")
    group_col <- field_choices[choice_num]

    grouped_data <- MasterFile %>% group_by_at(group_col) %>% summarise(Count = n(), Dollars = sum(Dollars))
    grouped_data$Dollars <- accounting(grouped_data$Dollars)
    return(grouped_data)
  })

  output$dataSummary <- renderDataTable({
    withProgress(message = 'Fetching data...',
                 value = 0, {
                   dataSummary()
                 })
  })

  output$downloadDataSummary <- downloadHandler(
    filename = function() {
      paste0("DEAMS_Summary_Pull", ".csv")
    },
    content = function(file) {
      write.csv(dataSummary(), file, row.names = FALSE)
    }
  )


  #returns debit credit results
  dcButton <- eventReactive(input$dcRun, {
    #call function when button is pushed
    withProgress(message = 'Comparing debits to credits...',
                 value = 0, {
                   op <- capture.output(DebitCreditCompare(MasterFile = MasterFile))
                   dc_res <- Debit_Credit_Results
                   #format output table
                   dc_res[c(1,2,4)] <- sapply(dc_res[c(1,2,4)], format_money)
                   #for(i in c(1,2,4)){dc_res[,i] <- accounting(dc_res[,i])}
                 })
    #outputs text to explain table
    output$dcdesc <- renderText({
      return("The table below includes summary data from comparing debits to credits. If everything is equal, the Difference column will contain zeros.")
    })
    return(dc_res)
  })

  output$tbtable <- renderDataTable({
    return(tbButton())
  })

  #shows print statement as result of tb recon
  output$tbrecon <- renderText({
    op <- tb_values[["log"]]
    #output depends on which TB tables we have
    if(length(op) > 4)
      return(paste(op[1], op[2], op[3], "\n", op[5], sep = "\n"))
    else {
      return(paste(op[1], op[2], sep = "\n"))
    }
    #return(op[1])
  })

  #generate list of tcodes to display as input
  outVar <- reactive({
    ic <- tcodeButton()
    ic$TCode
  })

  #triggers outVar
  observe({
    updateSelectInput(session, "tcode",
                      choices = outVar()
    )})


  output$dcresults <- renderTable({
    dcButton()
  })

  #dod tie point function is simple


  #populate filter choices on button click
  # observeEvent(input$updateChoices, {
  #   updateSelectInput(session, "glac_select", choices = sort(unique(MasterFile$GLAC)))
  #   updateSelectInput(session, "field_2_select", choices = sort(unique(MasterFile$JE.Source)))
  #   updateSelectInput(session, "field_3_select", choices = sort(unique(MasterFile$JE.Category)))
  #   updateSelectInput(session, "field_5_select", choices = sort(unique(MasterFile$JE.Category)))
  #   updateSelectInput(session, "field_8_select", choices = sort(unique(MasterFile$JE.Category)))
  #   updateSelectInput(session, "fund_code_select", choices = sort(unique(MasterFile$FundCode)))
  #   updateSelectInput(session, "compliance_select", choices = c("Compliant", "Blank TCode", "Not Compliant"))
  #   updateSelectInput(session, "group_select", choices = sort(unique(MasterFile$Account_Group)))
  #   updateSelectInput(session, "date_select", choices = sort(unique(MasterFile$Transaction.Post.Date)))
  #   updateSelectInput(session, "d_select", choices = sort(unique(MasterFile$Transaction.Post.Date)))
  # })

  observe({
    if(exists("MasterFile")){
      updateSelectInput(session, "glac_select", choices = sort(unique(MasterFile$GLAC)))
      updateSelectInput(session, "field_2_select", choices = sort(unique(MasterFile$JE.Source)))
      updateSelectInput(session, "field_3_select", choices = sort(unique(MasterFile$JE.Category)))
      updateSelectInput(session, "field_5_select", choices = sort(unique(MasterFile$Attribute.Category)))
      updateSelectInput(session, "field_8_select", choices = sort(unique(MasterFile$Interface.Source.Code)))
      updateSelectInput(session, "fund_code_select", choices = sort(unique(MasterFile$FundCode)))
      updateSelectInput(session, "compliance_select", choices = c("Compliant", "Blank TCode", "Not Compliant"))
      updateSelectInput(session, "group_select", choices = sort(unique(MasterFile$Account_Group)))
      updateSelectInput(session, "date_select", choices = sort(unique(MasterFile$Transaction.Post.Date)))
      updateSelectInput(session, "d_select", choices = sort(unique(MasterFile$Transaction.Post.Date)))
      updateSelectInput(session, "tc_select", choices = sort(unique(MasterFile$TCode)))

    }
  })

  #when run abnormal balances is clicked
  observeEvent(input$RunAbnorm,{
    withProgress(message = 'Identifying Abnormal Balances...',
                 value = 0, {
                   if(!exists("MasterFile")){
                     output$RunCleanDeams <- renderText({
                       return("Please import the master file before you run Abnormal Balances.")
                     })
                   } else{
                     my <- MasterFile$Period.Name[1]
                     mon <- tolower(substr(my, 1, 3))
                     mon <- paste0(toupper(substr(mon, 1, 1)), substr(mon, 2, 3))
                     yr <- substr(my, nchar(my) - 1, nchar(my))


                     li_tb_month <<- get(paste0("LI_TB_", toupper(mon), yr))

                     IdentifyAbBals(MasterFile = MasterFile, li_tb_month, checkFunds = "ALL")

                     output$AbBalDesc <- renderText({
                       return("The table below contains summary data for each fund code in the transactional data.")
                     })
                     #output summary table
                     output$ABBalSummary <- renderDataTable({
                       return(FundsReviewed)
                     })

                     #update the choice options for the document number select input
                     updateSelectInput(session, "FundSelect",
                                       choices = FundsReviewed$Fund.Code)
                   }
                 })

  })

  observeEvent(input$FundAbBal,{
    withProgress(message = 'Analyzing Fund Code...',
                 value = 0, {
                   fund <- input$FundSelect
                   my <- MasterFile$Period.Name[1]
                   mon <- tolower(substr(my, 1, 3))
                   mon <- paste0(toupper(substr(mon, 1, 1)), substr(mon, 2, 3))
                   yr <- substr(my, nchar(my) - 1, nchar(my))


                   LI_TB_Month <<- get(paste0("LI_TB_", toupper(mon), yr))

                   IdentifyAbBals(MasterFile = MasterFile,LI_TB_Month = LI_TB_Month,checkFunds = fund)

                   output$shredDetail <- renderTable({
                     return(fundSumShred)
                   })

                   output$groupDetail <- renderTable({
                     return(fundSumGroup)
                   })

                 })
  })

  #when the FFSData button is clicked this will run
  observeEvent(input$FFSData,{
    withProgress(message = 'Running Full Financial Suite Data Generator...',
                 value = 0, {

                   #checks if master file exists
                   if(exists("MasterFile")==TRUE){
                     FFSOutput(MasterFile = MasterFile)
                     #text will display on the FFS tab informing the user that the raw data has been generated
                     output$fullfinancialsuite <- renderText({
                       message <- paste("The FFS raw data has been saved to the selected file path. To generate the financial statements, open the FullFinancialSuite.xlsm file and point to the raw data. Once the statements have been created, click the Import Financial Statements button below.")
                       return(message)
                     })
                   }
                   #if master file doesnt exist, tell user to input it first
                   if(exists("MasterFile")==FALSE){
                     output$fullfinancialsuite <- renderText({
                       message <- "The master file does not exist.  Please run import and clean data before running this function."
                       return(message)
                     })
                   }
                 })
  })

  #when user clicks the overpunch button on the other functionalities page, the overpunch converter function will run
  observeEvent(input$overpunch,{
    withProgress(message = 'Running Over Punch Conversion...',
                 value = 0, {
                   Converter <- get("Converter")
                   OverPunchConverter()
                   #text will display on the FFS tab informing the user that the raw data has been generated
                   output$overpunchtext <- renderText({
                     return("The over punch values in the chosen file have been converted. The final values can be found in column AH of the converted file.  The new file is saved in the specified location.  The table below also contains the converted numbers in the column titled Final Amount.")
                   })

                   #creates table with relevant columns
                   output$Converted <- renderTable({
                     return(DCMS_Converted[,c(1:2,5,29:31,34)])
                   })
                 })
  })

  #runs shame function
  observeEvent(input$runShame,{
    if(input$ShameType == "TCode Compliance"){
      #checks to make sure masterfile exists and tcode analysis has run - won't work otherwise
      if(exists("MasterFile") & ("TC_Result" %in% names(MasterFile))){
        updateSelectInput(session, "MAJCOM_choice", choices = sort(unique(MasterFile$MAJCOM)))
        #this creates a list of all the elements the user chooses
        listofVars <- "MAJCOM"

        #calls shame function
        Shame(MasterFile = MasterFile,levelOfAnalysis = listofVars)

        #outputs text description
        output$plotdesc <- renderText({
          return("The graph below shows each Location and the number of noncompliant transactions.")
        })

        #creates plot of tcode issues by majcom
        output$shamebreakout <- renderPlot({
          return(g)
        })

        #outputs table with majcom details
        output$top10user <- renderDataTable({
          #top10shame <- head(ShamePlot,10)
          top10shame <- ShamePlot
          top10shame$Combination <- NULL
          return(top10shame[,c(1,4,2,3)])
        },
        options = list(iDisplayLength = 10))

      }else{
        #if masterfile doesn't exist or tcode analysis hasnt run, notifies user
        output$noShame <- renderText({
          return("You must import the master file and run TCode Analysis prior to running this function.")
        })
      }
    }

    #runs viddi function for missing sales code check
    if(input$ShameType == "Missing Sales Code"){
      if(exists("MasterFile")){
        #updates the majcom drop down with all possibilities
        updateSelectInput(session, "MAJCOM_choice", choices = sort(unique(MasterFile$MAJCOM)))
        #this creates a list of all the elements the user chooses
        listofVars <- "MAJCOM"

        #calls missing data check function
        MissingDataCheck(MasterFile = MasterFile,levelOfAnalysis = listofVars)

        #outputs text to describe plot
        output$plotdesc <- renderText({
          return("The graph below shows each Location and the number of transactions missing the sales code identifier.")
        })

        #creates plot of missing sales code by majcom
        output$shamebreakout <- renderPlot({
          return(g)
        })

        #outputs table with majcom details
        output$top10user <- renderDataTable({
          #top10shame <- head(ShamePlot,10)
          top10shame <- ShamePlot
          top10shame$Combination <- NULL
          return(top10shame[,c(1,4,2,3)])
        },
        options = list(iDisplayLength = 10))
      }else{
        #if masterfile doesn't exist, notifies user
        output$noShame <- renderText({
          return("You must import the master file prior to running this function.")
        })
      }
    }else if (input$ShameType == "Missing F/N Indicator"){
      if(exists("MasterFile")){
        #updates the majcom drop down with all possibilities
        updateSelectInput(session, "MAJCOM_choice", choices = sort(unique(MasterFile$MAJCOM)))
        #this creates a list of all the elements the user chooses
        listofVars <- "MAJCOM"

        #calls missing data check function
        FNFMissingDataCheck(MasterFile = MasterFile,levelOfAnalysis = listofVars)

        #outputs text to describe plot
        output$plotdesc <- renderText({
          return("The graph below shows each Location and the number of transactions missing the f/n indicator.")
        })

        #creates plot of missing sales code by majcom
        output$shamebreakout <- renderPlot({
          return(g)
        })

        #outputs table with majcom details
        output$top10user <- renderDataTable({
          #top10shame <- head(ShamePlot,10)
          top10shame <- ShamePlot
          top10shame$Combination <- NULL
          return(top10shame[,c(1,4,2,3)])
        },
        options = list(iDisplayLength = 10))
      }else{
        #if masterfile doesn't exist, notifies user
        output$noShame <- renderText({
          return("You must import the master file prior to running this function.")
        })
      }
    }
  })

  #function when analyze majcom button is clicked
  observeEvent(input$MAJDetail,{
    MAJCOM <- input$MAJCOM_choice
    password <- input$password

    #if the majcom and password match what is in the table, run function to dive into the majcom level detail
    output$PWordText <- renderText({
      # if(TRUE %in% (MAJCOMPWordTable$Password[MAJCOMPWordTable$MAJCOM == MAJCOM] == password)){
        #if tcode is selected, run tcode check
        if(input$ShameType == "TCode Compliance"){
          ################### group by SYSTEM #####################
          output$SystemText <- renderText({
            return("The graph below shows TCode Compliance results by System.")
          })
          listofVars <- c("MAJCOM","System")
          #calls shame function
          Shame(MasterFile = MasterFile,levelOfAnalysis = listofVars,selectedMAJCOM = MAJCOM)
          h <- g
          system <- ShamePlot
          #creates plot of tcode issues
          output$systemPlot <- renderPlot({
            return(h)
          })
          output$systemDetail <- renderDataTable({
            #top10shame <- head(ShamePlot,10)
            system$Combination <- NULL

            return(system[,c(1,2,5,3,4)])
          },
          options = list(iDisplayLength = 10))

          ################### group by User #####################
          output$UserText <- renderText({
            return("The graph below shows TCode Compliance results by User.")
          })
          listofVars <- c("MAJCOM","User")
          #calls shame function
          Shame(MasterFile = MasterFile,levelOfAnalysis = listofVars,selectedMAJCOM = MAJCOM)
          i <- g
          user <- ShamePlot
          #creates plot of tcode issues
          output$userPlot <- renderPlot({
            return(i)
          })
          output$userDetail <- renderDataTable({
            #top10shame <- head(ShamePlot,10)
            user$Combination <- NULL
            return(user[,c(1,2,5,3,4)])
          },
          options = list(iDisplayLength = 10))

          #creates table of computer users to distinguish from actual humans
          output$CompText <- renderText({
            return ("The table below contains TCode Compliance results due to computer interface issues at this location.")
          })

          output$CompDetail <- renderDataTable({
            return(compData)
          })
          ################### group by SITE #######################
          output$SiteText <- renderText({
            return("The graph below shows TCode Compliance results by Site.")
          })

          listofVars <- c("MAJCOM","Site")
          #calls shame function
          Shame(MasterFile = MasterFile,levelOfAnalysis = listofVars,selectedMAJCOM = MAJCOM)
          f <- g
          site <- ShamePlot
          #creates plot of tcode issues
          output$sitePlot <- renderPlot({
            return(f)
          })
          output$siteDetail <- renderDataTable({
            #top10shame <- head(ShamePlot,10)
            site$Combination <- NULL
            return(site[,c(1,2,5,3,4)])
          },
          options = list(iDisplayLength = 10))
          return("")
        }
        #if missing data check is selected, run missing sales code check
        if(input$ShameType == "Missing Sales Code"){

          ################### group by SYSTEM #####################
          output$SystemText <- renderText({
            return("The graph below shows blank sales code results by System.")
          })
          listofVars <- c("MAJCOM","System")
          #calls shame function
          MissingDataCheck(MasterFile = MasterFile, levelOfAnalysis = listofVars,selectedMAJCOM = MAJCOM)
          h <- g
          system <- ShamePlot
          #creates plot of tcode issues
          output$systemPlot <- renderPlot({
            return(h)
          })
          output$systemDetail <- renderDataTable({
            #top10shame <- head(ShamePlot,10)
            system$Combination <- NULL
            return(system[,c(1,2,5,3,4)])
          },
          options = list(iDisplayLength = 10))

          ################### group by User #####################
          output$UserText <- renderText({
            return("The graph below shows blank sales code results by User.")
          })
          listofVars <- c("MAJCOM","User")
          #calls shame function
          MissingDataCheck(MasterFile = MasterFile, levelOfAnalysis = listofVars,selectedMAJCOM = MAJCOM)
          i <- g
          user <- ShamePlot
          #creates plot of tcode issues
          output$userPlot <- renderPlot({
            return(i)
          })
          output$userDetail <- renderDataTable({
            #top10shame <- head(ShamePlot,10)
            user$Combination <- NULL
            return(user[,c(1,2,5,3,4)])
          },
          options = list(iDisplayLength = 10))

          ################### group by SITE #######################
          output$SiteText <- renderText({
            return("The graph below shows blank sales code results by Site.")
          })

          listofVars <- c("MAJCOM","Site")
          #calls shame function
          MissingDataCheck(MasterFile = MasterFile, levelOfAnalysis = listofVars,selectedMAJCOM = MAJCOM)

          f <- g
          site <- ShamePlot
          #creates plot of tcode issues
          output$sitePlot <- renderPlot({
            return(f)
          })
          output$siteDetail <- renderDataTable({
            #top10shame <- head(ShamePlot,10)
            site$Combination <- NULL
            return(site[,c(1,2,5,3,4)])
          },
          options = list(iDisplayLength = 10))

          #creates table of computer generated issues
          output$CompText <- renderText({
            return ("The table below contains blank sales code results due to computer interface issues within this Location.")
          })

          output$CompDetail <- renderDataTable({
            return(compData)
          })

          return("")

        }
        #if missing data check is selected, run missing fnf indicator
        if(input$ShameType == "Missing F/N Indicator"){

          ################### group by SYSTEM #####################
          output$SystemText <- renderText({
            return("The graph below shows blank f/n indicator results by System.")
          })
          listofVars <- c("MAJCOM","System")
          #calls shame function
          FNFMissingDataCheck(MasterFile = MasterFile, levelOfAnalysis = listofVars,selectedMAJCOM = MAJCOM)
          h <- g
          system <- ShamePlot
          #creates plot of tcode issues
          output$systemPlot <- renderPlot({
            return(h)
          })
          output$systemDetail <- renderDataTable({
            #top10shame <- head(ShamePlot,10)
            system$Combination <- NULL
            return(system[,c(1,2,5,3,4)])
          },
          options = list(iDisplayLength = 10))

          ################### group by User #####################
          output$UserText <- renderText({
            return("The graph below shows blank sales code results by User.")
          })
          listofVars <- c("MAJCOM","User")
          #calls shame function
          FNFMissingDataCheck(MasterFile = MasterFile, levelOfAnalysis = listofVars,selectedMAJCOM = MAJCOM)
          i <- g
          user <- ShamePlot
          #creates plot of tcode issues
          output$userPlot <- renderPlot({
            return(i)
          })
          output$userDetail <- renderDataTable({
            #top10shame <- head(ShamePlot,10)
            user$Combination <- NULL
            return(user[,c(1,2,5,3,4)])
          },
          options = list(iDisplayLength = 10))

          ################### group by SITE #######################
          output$SiteText <- renderText({
            return("The graph below shows blank sales code results by Site.")
          })

          listofVars <- c("MAJCOM","Site")
          #calls shame function
          FNFMissingDataCheck(MasterFile = MasterFile, levelOfAnalysis = listofVars,selectedMAJCOM = MAJCOM)

          f <- g
          site <- ShamePlot
          #creates plot of tcode issues
          output$sitePlot <- renderPlot({
            return(f)
          })
          output$siteDetail <- renderDataTable({
            #top10shame <- head(ShamePlot,10)
            site$Combination <- NULL
            return(site[,c(1,2,5,3,4)])
          },
          options = list(iDisplayLength = 10))

          #creates table of computer generated issues
          output$CompText <- renderText({
            return ("The table below contains blank sales code results due to computer interface issues within this Location.")
          })

          output$CompDetail <- renderDataTable({
            return(compData)
          })

          return("")

        }

      # }else{
      #   return("The user name and password do not match.")
      # }

    })
    #this function deals with the clickable site plots
    output$shame_x_value <- renderText({
      if (is.null(input$shamebreakout_click$y)) return("")
      else {
        #drops unused levels
        ShamePlot$Combination <- as.factor(ShamePlot$Combination)
        ShamePlot$Combination <- droplevels(ShamePlot$Combination)


        #sets levels
        ShamePlot$Combination <- factor(ShamePlot$Combination, levels = unique(ShamePlot$Combination))

        #creates list of all levels
        if (input$ShameType == "Missing Sales Code"){
          lvls <<- levels(reorder(ShamePlot$Combination, (ShamePlot$Blank.Sales.Code)))
        }else if (input$ShameType == "Missing F/N Indicator"){
          lvls <<- levels(reorder(ShamePlot$Combination, (ShamePlot$NonCompliant)))
        }
        #the graph only plots the top 30 rows so this if statement accounts for that
        if(length(lvls)>30){
          #finds the combination value associated with the numerical value where the user clicked
          number <<- length(lvls) - 30 + round(input$shamebreakout_click$y)
          test <<- round(input$shamebreakout_click$y)
        }else{
          number <- round(input$shamebreakout_click$y)
        }
        #finds the combination value associated with the numerical value where the user clicked
        name <<- lvls[number]

        currentName <<- name
        #gets just the majcom out of the combination
        MAJCOM_clicked <- substr(currentName,1,regexpr("~",currentName)-1)
        #gets the majcom and site out of the combination
        site_clicked <- substr(currentName,regexpr("~",currentName)+1,nchar(currentName))


        #filter master file to clicked values
        MastSummary <- MasterFile %>% filter(MAJCOM == MAJCOM_clicked, DESCRIPTION == site_clicked)

        #summarize users data for tcode
        if(input$ShameType == "TCode Compliance"){
          usersummary <- MastSummary %>% group_by(MAJCOM,DESCRIPTION,SL_UserName) %>% summarise(NonCompliant = sum(TC_Result == "Not Compliant"),
                                                                                                Compliant = sum(TC_Result == "Compliant"))


          #arrange by noncompliance
          usersummary <- arrange(usersummary,desc(NonCompliant))

          #gets table with computer issues
          compData <- filter(usersummary,usersummary$SL_UserName == "APPSMGR" | usersummary$SL_UserName == "INTERFACE" | usersummary$SL_UserName == "DEAMS_ERP_BATCH_SCHEDULER")
          #gets table with human issues
          SitePlot <- filter(usersummary,usersummary$SL_UserName != "APPSMGR" & usersummary$SL_UserName != "INTERFACE" & usersummary$SL_UserName != "DEAMS_ERP_BATCH_SCHEDULER")
          #creates plot of site level detail with human noncompliance issues
          g <<- ggplot(SitePlot[1:50,], aes(x = reorder(SL_UserName, (NonCompliant)) ,(NonCompliant))) + geom_bar(stat = "identity") + coord_flip() + theme_bw()+ xlab("Level of Analysis")
          + ylab("Number of NonCompliant Transactions") +
            scale_x_discrete(labels = function(x) str_wrap(x, width = 50))

          #formats, sums the columns, and adds total row
          usersummary[nrow(usersummary)+1,c(4:5)] <- t(colSums(usersummary[,c(4:5)]))
          usersummary[nrow(usersummary),1] <- currentName
          usersummary$DESCRIPTION <- as.character(usersummary$DESCRIPTION)
          usersummary[nrow(usersummary),3] <- "Totals"
          usersummary$Percent.NonCompliant <- usersummary$NonCompliant*100/(usersummary$NonCompliant+usersummary$Compliant)
          usersummary$Percent.NonCompliant <- round(usersummary$Percent.NonCompliant,digits = 2)
          #arranges table by toal trans
          usersummary <- arrange(usersummary,desc(NonCompliant))

          ####create system plot on site level page####
          systemsummary <- MastSummary %>% group_by(MAJCOM,DESCRIPTION,FY18SS) %>% summarise(NonCompliant = sum(TC_Result == "Not Compliant"),
                                                                                             Compliant = sum(TC_Result == "Compliant"))
          systemsummary$Percent.NonCompliant <- systemsummary$NonCompliant*100/(systemsummary$NonCompliant+systemsummary$Compliant)
          systemsummary$Percent.NonCompliant <- round(systemsummary$Percent.NonCompliant,digits = 2)

          #arrange by noncompliance
          systemsummary <- arrange(systemsummary,desc(NonCompliant))
          j <<- ggplot(na.omit(systemsummary[1:50,]), aes(x = reorder(FY18SS, (NonCompliant)) ,(NonCompliant))) + geom_bar(stat = "identity") +
            coord_flip() + theme_bw()+ xlab("Level of Analysis") + ylab("Number of NonCompliant Transactions") +
            scale_x_discrete(labels = function(x) str_wrap(x, width = 50))

        }else if (input$ShameType == "Missing Sales Code"){
          #applies sales code logic
          usersummary <- MastSummary %>% mutate(Requires.SC = ifelse(Direct.Reimbursable == "R"|GLAC == "4221"| GLAC == "4222"|
                                                                       GLAC == "4252"|GLAC == "4251"|GLAC == "1310","Yes","No"))
          usersummary <- usersummary %>% group_by(MAJCOM,DESCRIPTION,SL_UserName) %>% summarise(Blank.Sales.Code = sum(Sales.Code == "" &
                                                                                                                         Requires.SC == "Yes"), Populated.Sales.Code =
                                                                                                  sum(Sales.Code != "" | (Sales.Code == "" & Requires.SC == "No")))



          #arrange by noncompliance
          usersummary <- arrange(usersummary,desc(Blank.Sales.Code))
          #creates table with computer generated issues
          compData <- usersummary %>% filter(SL_UserName == "APPSMGR" | SL_UserName == "INTERFACE" | SL_UserName == "DEAMS_ERP_BATCH_SCHEDULER")
          #creates table with human issues
          SitePlot <- usersummary %>% filter(SL_UserName != "APPSMGR" & SL_UserName != "INTERFACE" & SL_UserName != "DEAMS_ERP_BATCH_SCHEDULER")
          g <<- ggplot(SitePlot[1:50,], aes(x = reorder(SL_UserName, (Blank.Sales.Code)) ,(Blank.Sales.Code))) + geom_bar(stat = "identity") +
            coord_flip() + theme_bw()+ xlab("Level of Analysis") + ylab("Number of Blank Sales Code")+
            scale_x_discrete(labels = function(x) str_wrap(x, width = 50))

          #formats,sums the columns, and adds total row
          usersummary[nrow(usersummary)+1,c(4:5)] <- t(colSums(usersummary[,c(4:5)]))
          usersummary[nrow(usersummary),1] <- currentName
          usersummary$DESCRIPTION <- as.character(usersummary$DESCRIPTION)
          usersummary[nrow(usersummary),3] <- "Totals"
          usersummary$Percent.Blank <- usersummary$Blank.Sales.Code*100/(usersummary$Blank.Sales.Code+usersummary$Populated.Sales.Code)
          usersummary$Percent.Blank <- round(usersummary$Percent.Blank,digits = 2)

          ####create system plot on site level page####
          systemsummary <- MastSummary %>% mutate(Requires.SC = ifelse(Direct.Reimbursable == "R"|GLAC == "4221"| GLAC == "4222"|
                                                                         GLAC == "4252"|GLAC == "4251"|GLAC == "1310","Yes","No"))

          systemsummary <- systemsummary %>% group_by(MAJCOM,DESCRIPTION,FY18SS) %>% summarise(Blank.Sales.Code = sum(Sales.Code == "" &
                                                                                                                        Requires.SC == "Yes"), Populated.Sales.Code =
                                                                                                 sum(Sales.Code != "" | (Sales.Code == "" & Requires.SC == "No")))


          systemsummary$Percent.Blank <- systemsummary$Blank.Sales.Code*100/(systemsummary$Blank.Sales.Code+systemsummary$Populated.Sales.Code)
          systemsummary$Percent.Blank <- round(systemsummary$Percent.Blank,digits = 2)
          #arrange by noncompliance
          systemsummary <- arrange(systemsummary,desc(Blank.Sales.Code))
          j <<- ggplot(na.omit(systemsummary[1:50,]), aes(x = reorder(FY18SS, (Blank.Sales.Code)) ,(Blank.Sales.Code))) + geom_bar(stat = "identity") + coord_flip() +
            theme_bw()+ xlab("Level of Analysis") + ylab("Number of Blank Sales Code")+
            scale_x_discrete(labels = function(x) str_wrap(x, width = 50))

        }else if(input$ShameType == "Missing F/N Indicator"){
          usersummary <- MastSummary %>% group_by(MAJCOM,DESCRIPTION,SL_UserName) %>% summarise(NonCompliant = sum(Fed.Non.Fed.Indicator == ""),
                                                                                                Compliant = sum(Fed.Non.Fed.Indicator != ""))


          #arrange by noncompliance
          usersummary <- arrange(usersummary,desc(NonCompliant))

          #gets table with computer issues
          compData <- filter(usersummary,usersummary$SL_UserName == "APPSMGR" | usersummary$SL_UserName == "INTERFACE" | usersummary$SL_UserName == "DEAMS_ERP_BATCH_SCHEDULER")
          #gets table with human issues
          SitePlot <- filter(usersummary,usersummary$SL_UserName != "APPSMGR" & usersummary$SL_UserName != "INTERFACE" & usersummary$SL_UserName != "DEAMS_ERP_BATCH_SCHEDULER")
          #creates plot of site level detail with human noncompliance issues
          g <<- ggplot(SitePlot[1:50,], aes(x = reorder(SL_UserName, (NonCompliant)) ,(NonCompliant))) + geom_bar(stat = "identity") + coord_flip() + theme_bw()+ xlab("Level of Analysis") + ylab("Number of NonCompliant Transactions") +
            scale_x_discrete(labels = function(x) str_wrap(x, width = 50))

          #formats, sums the columns, and adds total row
          usersummary[nrow(usersummary)+1,c(4:5)] <- t(colSums(usersummary[,c(4:5)]))
          usersummary[nrow(usersummary),1] <- currentName
          usersummary$DESCRIPTION <- as.character(usersummary$DESCRIPTION)
          usersummary[nrow(usersummary),3] <- "Totals"
          usersummary$Percent.NonCompliant <- usersummary$NonCompliant*100/(usersummary$NonCompliant+usersummary$Compliant)
          usersummary$Percent.NonCompliant <- round(usersummary$Percent.NonCompliant,digits = 2)
          #arranges table by toal trans
          usersummary <- arrange(usersummary,desc(NonCompliant))

          ####create system plot on site level page####
          systemsummary <- MastSummary %>% group_by(MAJCOM,DESCRIPTION,FY18SS) %>% summarise(NonCompliant = sum(Fed.Non.Fed.Indicator == ""),
                                                                                             Compliant = sum(Fed.Non.Fed.Indicator != ""))
          systemsummary$Percent.NonCompliant <- systemsummary$NonCompliant*100/(systemsummary$NonCompliant+systemsummary$Compliant)
          systemsummary$Percent.NonCompliant <- round(systemsummary$Percent.NonCompliant,digits = 2)

          #arrange by noncompliance
          systemsummary <- arrange(systemsummary,desc(NonCompliant))
          j <<- ggplot(na.omit(systemsummary[1:50,]), aes(x = reorder(FY18SS, (NonCompliant)) ,(NonCompliant))) + geom_bar(stat = "identity") +
            coord_flip() + theme_bw()+ xlab("Level of Analysis") + ylab("Number of NonCompliant Transactions") +
            scale_x_discrete(labels = function(x) str_wrap(x, width = 50))
        }

        #outputs plots
        output$site_userplot <- renderPlot({
          return(g)
        })

        output$site_systemplot <- renderPlot({
          return(j)
        })

        #outputs table
        output$site_userdeets <- renderDataTable({
          return(usersummary[,c(1,2,3,6,4,5)])
        },
        options = list(iDisplayLength = 10))

        output$site_systemdeets <- renderDataTable({
          return(systemsummary[,c(1,2,3,6,4,5)])
        },
        options = list(iDisplayLength = 10))
        paste0("You have selected ", MAJCOM_clicked," ",site_clicked, ". \n Here is more detail.")

      }
    })
  })

  observeEvent(input$RunManualTOT,{
    numMonths <- input$numMonths
    tempMast <- data.frame()
    if(numMonths == 1 & exists("MasterFile")){
      tempMast <- MasterFile[,c("Transaction.Post.Date","SL_UserName","FY18SS","Dollars")]
      tempMast <<- tempMast
    }else{
      for(i in 1:numMonths){
        CleanDEAMSFile(MonthFY = "")
        MasterFile <- MasterFile[,c("Transaction.Post.Date","SL_UserName","FY18SS","Dollars")]
        tempMast <- rbind(tempMast,MasterFile)
        tempMast <<- tempMast
        rm(MasterFile)
        gc()
      }
    }
    output$manualtot <- renderPlot({
      TransactionsOverTime(filter(tempMast,FY18SS == "JV WebADI"))
    })
  })
  output$testing <- renderText({
    if (is.null(input$manualtot_click$x)) return("")
    else {
      testDate <<- (as.Date(round(input$manualtot_click$x,digits = 0)))
      sample <- tempMast %>% filter(Transaction.Post.Date == testDate & FY18SS == "JV WebADI")
      userdetails <- sample %>% group_by(SL_UserName) %>% summarise(Number.of.Transactions = n())
      #dateSummary <- sample( %>% group_by())

      output$manual_users <- renderDataTable({
        return(userdetails)
      })

      return (paste("There were ",nrow(sample)," JV WebADI transactions posted on ",testDate,". Further details are below.", sep =""))
    }
  })

  observeEvent(input$RunP2P,{
    #runs function
    withProgress(message = 'Finding abnormal balances...', value = 0, {
      showP2PSummaries(fund.code = "All", document = "All")
    })
    #outputs data table
    output$P2PDesc <- renderDataTable({
      return(fund.summary)
    })
    #update the choice options for the document number select input
    updateSelectInput(session, "FundCode",
                      choices = fund.summary$FundCode)
  })

  observeEvent(input$RunFundCode,{
    #gets fund code
    fund.code <<- input$FundCode

    #runs function
    withProgress(message = 'Summarizing fund code...', value = 0, {
      showP2PSummaries(fund.code = fund.code, document = "All")
    })

    #outputs summary data table
    output$FundSummary <- renderDataTable({
      return(doc.summary)
    })
    #update the choice options for the document number select input
    updateSelectInput(session, "DocNo",
                      choices = doc.summary$Document)
  })

  observeEvent(input$RunDocNo,{
    #get selcted document
    doc.no <<- input$DocNo

    #get selected number of quarters
    Num_of_Qs <<- input$NumQs

    #runs function
    withProgress(message = 'Summarizing document...', value = 0, {
      showP2PSummaries(fund.code = fund.code, document = doc.no)
    })

    #outputs summary table
    output$DocDetail <- renderDataTable({
      return(final.doc.summary)
    })

    updateSelectInput(session, "docref5",
                      choices = unique(doc.data$Reference5))
    updateSelectInput(session, "docglac",
                      choices = unique(substr(doc.data$USSGL, 1, 4)))
  })

  observeEvent(input$getDocLines,{
    output$DocLines <- renderDataTable({
      reffies <- input$docref5
      glaccies <- input$docglac

      if(is.null(input$docref5)) {reffies <- unique(doc.data$Reference5)}
      if(is.null(input$docglac)) {glaccies <- unique(substr(doc.data$USSGL, 1, 4))}

      data.to.return <- doc.data[,-(15:17)] %>% filter(Reference5 %in% reffies & substr(USSGL, 1, 4) %in% glaccies)
      names(data.to.return)[names(data.to.return) == "Document.Number"] <- "Reference4"
      return(data.to.return)
    })
  })

  #when user clicks the tie point analysis this will run
  observeEvent(input$tpanalysis, {
    withProgress(message = 'Running Tie Point Analysis...',
                 value = 0, {
                   #runs tie point analysi if the tables aren't already there
                   if(!exists("VarianceLog")){
                     tprun <- capture.output(TiePointAnalysis(MasterFile = MasterFile, DetailVarianceTransactions = T))}

                   output$ytdresults <- renderDataTable({
                     return(YTD_Results)
                   })

                   output$mtdresults <- renderDataTable({
                     return(MTD_Results)
                   })

                   #outputs variance table
                   output$varlog <- renderDataTable({
                     return(VarianceLog)
                   })

                   output$vartrans <- renderDataTable({
                     return(TiePointVarianceTransactions[, 1:74])
                   })

                   output$downloadVarTrans<- downloadHandler(
                     filename = function() {
                       paste0("TiePointVarianceTransactions", gsub("-", "", MasterFile$Period.Name[1]), ".csv")
                     },
                     content = function(file) {
                       fwrite(TiePointVarianceTransactions, file, row.names = FALSE)
                     }
                   )

                 })
  })

  observeEvent(input$hideYTD, {
    hide("ytdresults")

    show("mtdresults")
  })

  observeEvent(input$hideMTD, {
    hide("mtdresults")

    show("ytdresults")
  })

  #when user clicks the tie point compare button this will run
  # observeEvent(input$tpcompare,{
  #   withProgress(message = 'Running Tie Point Comparison...',
  #                value = 0, {
  #                  #runs tie point comparison
  #                  results <- TiePointAnalysis(MasterFile = MasterFile,Output = FALSE)
  #
  #                  #outputs results table
  #                  output$ThreeTPComp <- renderTable({
  #                    return(results)
  #                  })
  #                })
  # })

  # observeEvent(input$tpDive,{
  #   withProgress(message = 'Running Tie Point Comparison...',
  #                value = 0, {
  #                  #sets variables from user inputs
  #                  if (input$fundcode == "Yes"){
  #                    fund <- "TRUE"
  #                  }else{
  #                    fund <- "FALSE"
  #                  }
  #                  opt1 <- input$elem1
  #                  opt2 <- input$elem2
  #                  opt3 <- input$elem3
  #                  tiepoint <- input$tiepoint
  #                  tiepoint <- as.character(tiepoint)
  #
  #                  #calls tie point filter function
  #                  TPShinyFilter(tiepoint = tiepoint,opt1 = opt1,opt2 = opt2,opt3 = opt3,fund = fund)
  #
  #                  #creates list of all variables user selected
  #                  listOfVars <- c()
  #                  if(fund != FALSE){
  #                    listOfVars <- c(listOfVars,"FundCode")
  #                  }
  #                  listOfVars <- c(listOfVars,"TiePointSide")
  #                  if(opt1 == "JE Source" | opt2 == "JE Source" | opt3 == "JE Source"){
  #                    listOfVars <- c(listOfVars,"JE.Source")
  #                  }
  #                  if(opt1 == "JE Category" | opt2 == "JE Category" | opt3 == "JE Category"){
  #                    listOfVars <- c(listOfVars,"JE.Category")
  #                  }
  #                  if(opt1 == "Funding Base" | opt2 == "Funding Base" | opt3 == "Funding Base"){
  #                    listOfVars <- c(listOfVars,"FundingBase")
  #                  }
  #
  #                  #gets the data to create the plot
  #                  data4plot <- tptableview
  #                  if (nrow(data4plot) == 0){
  #                    output$noData <- renderText({
  #                      return("This tie point did not contain any data for the current month.")
  #                    })
  #                  }else{
  #                    output$noData <- renderText({
  #                      return("")
  #                    })
  #                    #format the data
  #                    data4plot$GLAC <- NULL
  #                    data4plot <- data4plot %>% group_by_(.dots=names(data4plot)[-grep("Dollars", names(data4plot))]) %>%
  #                      summarise(Dollars = sum(Dollars))
  #
  #                    #spread the left and right side dollar amount
  #                    data4plot <- data4plot %>% spread(TiePointSide, Dollars)
  #
  #                    if("Right" %in% names(data4plot)){
  #                    }else{
  #                      data4plot$Right <- 0
  #                    }
  #
  #                    if("Left" %in% names(data4plot)){
  #                    }else{
  #                      data4plot$Left <- 0
  #                    }
  #
  #                    #calculate the dollar amount of the difference
  #                    data4plot <- data4plot %>%  mutate(Difference = abs(Left)-abs(Right))
  #
  #                    #more formatting
  #                    lastcol <- which(colnames(data4plot)=="Left") - 1
  #                    data4plot[,1:lastcol] <- apply(data4plot[,1:lastcol], 2, function(row) as.character(row))
  #                    data4plot[, 1:lastcol][is.na(data4plot[, 1:lastcol])]  <- " "
  #                    data4plot <- as.data.frame(data4plot)
  #
  #                    if(length(names(data4plot)) == 4){
  #                      data4plot[,1] <- as.character(data4plot[,1])
  #                    }
  #
  #                    #creates column with combination of all variables used to filter
  #                    data4plot <- data4plot %>% mutate(Combination = paste(apply(data4plot[,1:lastcol,drop=F], 1, function(row) paste(row, collapse="~"))))
  #
  #                    #formatting
  #                    data4plot$Combination <- as.factor(data4plot$Combination)
  #
  #                    #filters to only show rows where the difference is not zero
  #                    data4plot <- data4plot %>% filter(Difference != 0)
  #
  #                    #arranges based on highest difference
  #                    data4plot <- arrange(data4plot,desc(abs(Difference)))
  #
  #                    #creates plot and outputs it
  #                    output$tpbreakout <- renderPlot({
  #                      g <- ggplot(data4plot[1:20,], aes(x = reorder(Combination, -abs(Difference)) ,abs(Difference))) + xlab("Combination") + ylab("Absolute Variance")
  #                      b <- g + geom_bar(stat = "identity") + coord_flip() + theme_bw()
  #                      #b <- g + geom_bar(stat = "identity") + theme_bw()
  #                      return(b)
  #                    })
  #                    #same formatting and column creation as above
  #                    data4plot <<- data4plot
  #                    tptableview <- tptableview %>% group_by_(.dots=names(tptableview)[-grep("Dollars", names(tptableview))]) %>%
  #                      summarise(Dollars = sum(Dollars))
  #                    tptableview <- tptableview %>% spread(TiePointSide, Dollars)
  #                    tptableview <- tptableview %>% select(-GLAC,GLAC)
  #                    lastcol <- which(colnames(tptableview)=="Left") - 1
  #                    tptableview[,1:lastcol] <- apply(tptableview[,1:lastcol], 2, function(row) as.character(row))
  #                    tptableview[, 1:lastcol][is.na(tptableview[, 1:lastcol])]  <- " "
  #                    tptableview <- as.data.frame(tptableview)
  #                    if(length(names(tptableview)) == 4){
  #                      tptableview[,1] <- as.character(tptableview[,1])
  #                    }
  #                    tptableview <- tptableview %>% mutate(Combination = paste(apply(tptableview[,1:lastcol,drop=F], 1, function(row) paste(row, collapse="~"))))
  #                    tptableview <<- tptableview
  #
  #                    #reads the value of the place on the graph that someone clicked
  #                    output$tp_x_value <- renderText({
  #                      if (is.null(input$tpbreakout_click$y)) return("")
  #                      else {
  #                        #drops unused levels
  #                        data4plot$Combination <- droplevels(data4plot$Combination)
  #                        #sets levels
  #                        data4plot$Combination <- factor(data4plot$Combination, levels = unique(data4plot$Combination))
  #                        #creates list of all levels
  #                        lvls <<- levels(data4plot$Combination)
  #
  #                        #finds the combination value associated with the numerical value where the user clicked
  #                        name <- lvls[round(input$tpbreakout_click$y)]
  #
  #                        currentName <<- name
  #
  #                        #gets tabel of more detailed data based on the combination value clicked
  #                        output$selectedDetail <- renderDataTable({
  #                          selectDetail <- filter(tptableview,tptableview$Combination == currentName)
  #                          return(selectDetail)
  #                        })
  #                        paste0("You have selected ", name, ". \n Here is more detail.")
  #
  #                      }
  #                    })
  #
  #
  #
  #                    #creates table with relevant columns
  #                    output$tpDetail <- renderTable({
  #                      return(data4plot)
  #                    })
  #                  }
  #                })
  #
  # })

  breakoutTable <- eventReactive(input$getBreakout, {
    withProgress(message = 'Aggregating data...',
                 value = 0, {

                   #make a copy of masterfile using only columns we care about
                   diet_mf <- MasterFile[,c("GLAC", "FinalSourceSystem", "Dollars")]

                   #generalize systems better
                   diet_mf <- mutate(diet_mf, FinalSourceSystem = ifelse(grepl("DEAMS_", FinalSourceSystem),
                                                                         substr(FinalSourceSystem, 7, nchar(FinalSourceSystem)), FinalSourceSystem))
                   diet_mf <- mutate(diet_mf, FinalSourceSystem = ifelse(grepl("-I_001", FinalSourceSystem),
                                                                         substr(FinalSourceSystem, 1, 4), FinalSourceSystem))
                   diet_mf$FinalSourceSystem[diet_mf$FinalSourceSystem == "JV WebADI to GL"] <- "JV_WEBADI"
                   diet_mf$FinalSourceSystem[grepl("Manual", diet_mf$FinalSourceSystem)] <- "Manual"


                   if(input$breakout_choice == "System Bins"){
                     #make high-level source system bins
                     diet_mf <- mutate(diet_mf, Bin = ifelse(FinalSourceSystem == "DEAMS", "DEAMS",
                                                             ifelse(FinalSourceSystem == "JV_WEBADI", "JV_WEBADI",
                                                                    ifelse(FinalSourceSystem == "Manual", "Manual", "Feeder System"))))
                     diet_mf$Bin[is.na(diet_mf$Bin)] <- "Other/Unassigned"

                     summy <- diet_mf %>%
                       group_by(Bin) %>%
                       summarise(Transactions = accounting(n(), digits = 0),
                                 Dollars = accounting(sum(Dollars)),
                                 Transaction.Percent = percent(n()/nrow(diet_mf)),
                                 Dollar.Percent = percent(sum(Dollars)/sum(diet_mf$Dollars)))

                   }
                   else if(input$breakout_choice == "GLAC-System Breakout"){
                     #summarize by system and glac
                     summy <- diet_mf %>%
                       group_by(FinalSourceSystem, GLAC) %>%
                       summarise(Dollars = sum(Dollars))

                     #make table with a row for each source system, column for each glac
                     summy <- spread(summy, GLAC, Dollars, fill = 0)

                     summy <- summy %>%
                       group_by(FinalSourceSystem) %>%
                       summarise_all(funs(sum))
                   }
                 })
    return(summy)
  })



  output$breakout <- renderDataTable({
    breakoutTable()
  })

  bigBreakoutTable <- eventReactive(input$getBigBreakout, {
    if(exists("MasterFile"))
      updateSelectInput(session, "system", choices = unique(c(MasterFile$FY18SS, MasterFile$FinalSourceSystem)))

    return(systemBreakout(MasterFile))
  })

  observeEvent(input$bbHide, {
    toggle("bigBreakout")
  })

  output$bigBreakout <- renderDataTable({
    bigBreakoutTable()
  })

  detBreakoutTable <- eventReactive(input$getDetailedBreakout, {
    if(!input$breakoutOptions)
      return(systemBreakout(MasterFile, source.system = input$system, "naw"))
    else
      return(systemBreakout(MasterFile, source.system = input$system, "yas"))
  })

  output$detailedBreakout <- renderDataTable({
    detBreakoutTable()
  })



  #this creates sub tabs on the ffs tab.
  output$FinancialTab <- renderUI({
    navlistPanel(id = "subTabPanelFFS",
                 tabPanel("Main",
                          actionButton("FFSData", "Generate FFS Data",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                          textOutput("fullfinancialsuite"),
                          actionButton("importFFS","Import Financial Statements",style = 'font-size:100%;margin-top:20px;height:40px;width:200px')),
                 tabPanel("QDD Line Breakout",
                          tableOutput("QDDLine")),
                 tabPanel("Balance Sheet",
                          tableOutput("BalanceSheetTable")),
                 tabPanel("SBR",
                          tableOutput("SBRTable")),
                 tabPanel("Main SNC",
                          tableOutput("SNCTable")),
                 tabPanel("Main SCNP",
                          tableOutput("SCNPTable")),
                 tabPanel("Data",
                          tableOutput("DataTableOutput"))
    )
  })

  #when the user click import FFS, this will be run
  observeEvent(input$importFFS,{
    withProgress(message = 'Importing Financial Statements...',
                 value = 0, {
                   #reads various sheets from the selected file and stores them to a variable.
                   #also gets rid of all na values and changes any columns names that start with X to blank
                   filename <- choose.files(caption = "Select the file containing the FFS.", multi = F)
                   if(length(filename) > 0) {

                     QDDLB <- read.xlsx(filename, sheet = 2, startRow = 1, colNames = TRUE)
                     QDDLB[is.na(QDDLB)] <- ""
                     names(QDDLB)[(substr(names(QDDLB), 1, 1)=="X")] = ""

                     SBR <- read.xlsx(filename, sheet = 3, startRow = 1, colNames = TRUE)
                     SBR[is.na(SBR)] <- ""
                     names(SBR)[(substr(names(SBR), 1, 1)=="X")] = ""

                     BalanceSheet <-  read.xlsx(filename, sheet = 4, startRow = 1, colNames = TRUE)
                     BalanceSheet[is.na(BalanceSheet)] <- ""
                     names(BalanceSheet)[(substr(names(BalanceSheet), 1, 1)=="X")] = ""

                     SNC <- read.xlsx(filename, sheet = 5, startRow = 1, colNames = TRUE)
                     SNC[is.na(SNC)] <- ""
                     names(SNC)[(substr(names(SNC), 1, 1)=="X")] = ""

                     SCNP <- read.xlsx(filename, sheet = 6, startRow = 1, colNames = TRUE)
                     SCNP[is.na(SCNP)] <- ""
                     names(SCNP)[(substr(names(SCNP), 1, 1)=="X")] = ""

                     rawdata <- read.xlsx(filename, sheet = 8, startRow = 1, colNames = TRUE,cols = c(1:10))

                     #returns the respective table on each separate tab
                     output$QDDLine <- renderTable({
                       return(QDDLB)
                     })
                     output$BalanceSheetTable <- renderTable({
                       return(BalanceSheet)
                     })
                     output$SBRTable <- renderTable({
                       return(SBR)
                     })
                     output$SNCTable <- renderTable({
                       return(SNC)
                     })
                     output$SCNPTable <- renderTable({
                       return(SCNP)
                     })
                     output$DataTableOutput <- renderTable({
                       return(rawdata)
                     })
                   }
                 })

  })

})

#UI begins####
ui <- navbarPage(theme = "bootstrapcyborg.css", id = "ParentPage",selected = "Main Menu",
                 useShinyjs(),
                 fluidRow(headerPanel(title=div("Intelligent Financial Management Automation Analytics Package",style = 'text-align:center;'),windowTitle = "Financial Management Analytics Package")),
                 tabPanel("Main Menu",
                          #Adds images, text to main menu page
                          img(src='MainMenu4.png', align = "center",width = 1350, height = 75,style = 'text-align:center;'),
                          fluidRow(
                            column(12,

                                   helpText("An Analytical Solution to Audit Readiness",align = "center",style = 'text-align:center;white-space: nowrap;font: bold 25px Avant Garde, sans-serif;'),
                                   fluidRow(
                                     column(12,
                                            helpText("Repeatable. Auditable. Automated.",align = "center",style = 'text-align:center;white-space: nowrap;font: 25px Avant Garde, sans-serif;')
                                     )#,
                                     #
                                     # column(12,
                                     #        helpText("Be Audit You Can Be",align = "center",style = 'text-align:center;white-space: nowrap;font: bold 25px Avant Garde, sans-serif;')
                                     # )
                                   )
                            )
                          ),
                          img(src='MainMenu4.png', align = "center",width = 1350, height = 75),
                          fluidRow(
                            column(12,
                                   helpText("Overview",align = "center",style = 'text-align:center;white-space: nowrap;font: bold 18px Avant Garde, sans-serif;'),
                                   helpText("This R package consists of a customized library of functions that enable automation of key financial management requirements, ",align = "center",style = 'text-align:center;white-space: nowrap;font: 15px Avant Garde, sans-serif;'),
                                   helpText("Examples include Tie Point analysis and remediation, Abnormal Balance identification, and Standard Financial Information Structure (SFIS) compliance analysis",align = "center",style = 'text-align:center;white-space: nowrap;font: 15px Avant Garde, sans-serif;'),
                                   helpText("Code is modular and the logic can be easily customized to handle new processes and requirements.",align = "center",style = 'text-align:center;white-space: nowrap;font: 15px Avant Garde, sans-serif;')
                            )
                          ),
                          img(src='blackbackground.png', align = "center",width = 800, height = 40),
                          fluidRow(column(12,
                                          helpText("Import the transactional data by navigating to the Read and Clean Data Tab. Then, explore as you wish.",align = "left",style = 'text-align:center;white-space: nowrap;font: bold 16px Avant Garde, sans-serif;')
                          )),
                          img(src='blackbackground.png', align = "center",width = 500, height = 40)
                          #img(src='MainMenu3.png', align = "center",width = 1000, height = 210)


                 ),
                 #show basic info about masterfile
                 tabPanel("Read and Clean Data",
                          helpText("Click the Import and Clean Data button to select the transactional data file and read it in."),
                          actionButton("importData","Import and Clean Data",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                          fluidRow(
                            column(3,
                                   textOutput("datatabledesc"),
                                   tableOutput("qdd")),
                            column(4,
                                   textOutput("transplotdesc"),
                                   plotOutput("transactions")),
                            column(4,
                                   textOutput("dollarsplotdesc"),
                                   plotOutput("dollars")))
                 ),
                 #show print statements from tbrecon and glac summary
                 tabPanel("Reconciliation",
                          helpText("Compare the transactional data to trial balances."),
                          actionButton("tbRec", "Run Reconciliation",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                          verbatimTextOutput("tbrecon"),
                          actionButton("tbhide", "Show/hide GLAC summary",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                          textOutput("tbtabledesc"),
                          fluidRow(column(8, dataTableOutput("tbtable"))),
                          #show output from debitcreditcompare
                          helpText("Compare Debits to Credits across multiple levels of accounts."),
                          actionButton("dcRun", "Run Debit Credit Comparison",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                          textOutput("dcdesc"),
                          tableOutput("dcresults")
                 ),
                 tabPanel("T-Code Compliance Check",
                          helpText("This initial run will generate a list of T-Codes and corresponding GLACs that have compliance issues."),
                          actionButton("tcodeRun", "Run T-Code Analysis",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                          helpText("After running the T-Code function (button above), you can select a T-Code to examine."),
                          #display status for single tcode
                          verbatimTextOutput("tcodeoverview"),
                          verbatimTextOutput("checkop"),
                          #choose tcode to investigate
                          selectInput("tcode", "T-Code", choices = ""),
                          actionButton("checktcode", "Diagnose",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                          #show all tcodes that have compliance issues
                          fluidRow(
                            column(10, dataTableOutput("issuecodes"))
                          )
                 ),
                 navbarMenu("Tie Point Analysis",
                            tabPanel("Main Function",
                                     helpText("Compare tie points based on the DFAS Reconciliation Manual."),
                                     actionButton("tpanalysis", "Run Tie Point Analysis", style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                                     actionButton("hideMTD", "Show YTD Summary", style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                                     actionButton("hideYTD", "Show MTD Summary", style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                                     dataTableOutput("mtdresults"),
                                     dataTableOutput("ytdresults"),
                                     dataTableOutput("varlog")),
                            tabPanel("Detailed Transactions",
                                     helpText("View and filter the transactions causing variances."),
                                     downloadButton("downloadVarTrans", "Download",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                                     dataTableOutput("vartrans")
                            )
                            # tabPanel("Complete Comparison",
                            #          fluidRow(
                            #            column(12,align="center",
                            #                   helpText("Run the Tie Point Comparison button to compare all three sets of guidelines.",style = 'font-size:130%;margin-top:20px;'),
                            #                   actionButton("tpcompare","Run Tie Point Comparison"),
                            #                   tableOutput("ThreeTPComp"),
                            #                   helpText("Once Tie Point Comparison is run, you may analyze and drill into specific tie points.",style = 'font-size:130%;margin-top:20px;margin-bottom:20px'),
                            #                   radioButtons("fundcode","Analyze By Fund Code",choices = c("Yes","No"),inline = TRUE),
                            #                   selectInput("tiepoint","Tie Point",choices = c(1:24)),
                            #                   flowLayout(
                            #                     selectInput("elem1","Element One",choices = c("Please Select","JE Source","JE Category","Funding Base")),
                            #                     selectInput("elem2","Element Two",choices = c("Please Select","JE Source","JE Category","Funding Base")),
                            #                     selectInput("elem3","Element Three",choices = c("Please Select","JE Source","JE Category","Funding Base"))
                            #
                            #                   ),
                            #                   actionButton("tpDive","Execute",style = 'font-size:100%;margin-top:0px;align-self:center;'),
                            #                   verbatimTextOutput("noData"),
                            #                   plotOutput("tpbreakout",click = "tpbreakout_click", height = "400px"),
                            #                   verbatimTextOutput("tp_x_value"),
                            #                   verbatimTextOutput("selectedrows"),
                            #                   dataTableOutput("selectedDetail"),
                            #                   tableOutput("tpDetail")))
                            # )
                 ),
                 navbarMenu("Abnormal Balances",
                            tabPanel("Shred and Group Level",
                                     fluidRow(
                                       column(12,align="center",
                                              textOutput("RunCleanDeams"),
                                              #selectInput("TBSelect","Select the Previous Month's Trial Balance",choices = names(ListOfTBMonths)),
                                              actionButton("RunAbnorm", "Identify Possible Abnormal Balances",style = 'font-size:100%;margin-top:5px;height:40px;width:250px'),
                                              textOutput("AbBalDesc"),
                                              column(8, dataTableOutput("ABBalSummary")),
                                              helpText("Once possible abnormal balances have been identified, select a specific fund code in the drop down below to analyze further."),
                                              selectizeInput("FundSelect","Select a Fund Code to Analyze", choices = "", multiple = F),
                                              actionButton("FundAbBal","Analyze Fund Code",style = 'font-size:100%;margin-top:5px;height:40px;width:250px'),
                                              tableOutput("shredDetail"),
                                              tableOutput("groupDetail")))
                            ),
                            tabPanel("Procure to Pay",
                                     fluidRow(
                                       column(12,align="center",
                                              helpText("Click the button below to analyze Abnormal Balances for the Procure to Pay business cycle. A table will be returned with fund code detail.",style = 'font-size:130%;margin-top:20px;margin-bottom:20px'),
                                              actionButton("RunP2P", "Identify Abnormal Balances By Fund",style = 'font-size:100%;margin-top:5px;margin-bottom:10px;height:40px;width:250px')),
                                       column(6,offset = 3,align="center",
                                              dataTableOutput("P2PDesc")),
                                       column(12,align="center",
                                              helpText("Once Abnormal Balances have been identified, you may analyze and drill into specific fund codes.",style = 'font-size:130%;margin-top:20px;margin-bottom:20px'),
                                              selectizeInput("FundCode","Select a Fund Code to Analyze",choices="",multiple = F),
                                              actionButton("RunFundCode", "Analyze Fund",style = 'font-size:100%;margin-top:5px;margin-bottom:10px;height:40px;width:250px')),
                                       column(6,offset = 3,align="center",
                                              dataTableOutput("FundSummary")),
                                       column(12,align="center",
                                              helpText("Select a specific document to view detail by Reference5 and GLAC.",style = 'font-size:130%;margin-top:20px;margin-bottom:20px'),
                                              selectizeInput("DocNo","Select a Document to Analyze",choices="",multiple = F),
                                              actionButton("RunDocNo", "Analyze Document",style = 'font-size:100%;margin-top:5px;margin-bottom:10px;height:40px;width:250px'),
                                              dataTableOutput("DocDetail")),
                                       column(12, align="center",
                                              helpText("Pull detailed data related to the above document.", style = 'font-size:130%;margin-top:20px;margin-bottom:20px'),
                                              selectizeInput("docref5", "Select value of Reference5 to filter by", choices = "", multiple = T),
                                              selectizeInput("docglac", "Select GLAC to filter by", choices = "", multiple = T),
                                              actionButton("getDocLines", "Get data", style = 'font-size:100%;margin-top:5px;margin-bottom:10px;height:40px;width:250px'),
                                              dataTableOutput("DocLines")
                                       )
                                     ))),
                 tabPanel("Full Financial Suite",
                          uiOutput("FinancialTab")
                 ),
                 # tabPanel("Other Functionalities",
                 #          uiOutput("OtherTab")
                 # )
                 navbarMenu("Other Functionalities",
                            tabPanel("Over Punch Conversion",
                                     actionButton("overpunch", "Over Punch Converter",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                                     textOutput("overpunchtext"),
                                     tableOutput("Converted")
                            ),
                            tabPanel("Data Extraction",
                                     #helpText("Select columns and criteria to pull the desired data."),
                                     #uiOutput("choose_columns"),

                                     #actionButton("updateChoices", "Generate filter options",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                                     actionButton("showData", "Display",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),

                                     downloadButton("downloadData", "Download",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                                     #checkboxes to select desired columns
                                     flowLayout(
                                       selectizeInput("glac_select", "GLAC", choices = "", multiple = T),
                                       selectizeInput("field_2_select", "JE Source (Field 2)", choices = "", multiple = T),
                                       selectizeInput("field_3_select", "JE Category (Field 3)", choices = "", multiple = T),
                                       selectizeInput("field_5_select", "Attribute Category (Field 5)", choices = "", multiple = T),
                                       selectizeInput("field_8_select", "Interface Source Code (Field 8)", choices = "", multiple = T),
                                       selectizeInput("fund_code_select", "Fund Code", choices = "", multiple = T),
                                       selectizeInput("compliance_select", "T-Code Compliance Status", choices = c("Compliant", "Blank TCode", "Not Compliant"), multiple = T),
                                       selectizeInput("group_select", "Account Group", choices = "", multiple = T),
                                       selectizeInput("date_select", "Post Date", choices = "", multiple = T),
                                       textInput("dc_select", "Debit - Credit Amount"),
                                       textInput("doc_select", "Document Number"),
                                       textInput("batch_select", "JE Batch Name"),
                                       selectizeInput("tc_select", "TCode", choices = "", multiple = T)

                                     ),
                                     dataTableOutput("showDataWithSelectedColumns")
                            ),
                            tabPanel("Report Builder",
                                     actionButton("showDataSummary", "Display",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                                     downloadButton("downloadDataSummary", "Download",style = 'font-size:100%;margin-top:20px;height:40px;width:200px'),
                                     flowLayout(
                                       selectizeInput("group_column", "Select columns to group by",
                                                      choices = c("GLAC", "JE Source (Field 2)", "JE Category (Field 3)",
                                                                  "Attribute Category (Field 5)", "Interface Source Code (Field 8)",
                                                                  "Fund Code"), multiple = T)#,
                                       # selectizeInput("sum_column", "Select columns to summarize by",
                                       #                choices = c("Transaction Count", "Dollars", "Debits", "Credits"))
                                     ),
                                     dataTableOutput("dataSummary")
                            ),
                            tabPanel("System Materiality",
                                     actionButton("getBigBreakout", "Get source system breakout"),
                                     actionButton("bbHide", "Hide breakout table"),
                                     dataTableOutput("bigBreakout"),
                                     helpText(""),
                                     selectInput("system", "Select source system to examine", choices = NULL),
                                     actionButton("getDetailedBreakout", "Get detailed breakout"),
                                     checkboxInput("breakoutOptions", "Summarize GLACs", F),
                                     dataTableOutput("detailedBreakout")

                            ),
                            tabPanel("SFIS",tabsetPanel(
                              tabPanel("Location",
                                       radioButtons("ShameType", "Select an Option for Analysis", choices = c("Missing Sales Code","Missing F/N Indicator")),
                                       actionButton("runShame", "Analyze Locations",style = 'font-size:100%;margin-top:10px;margin-bottom:20px;height:40px;width:300px'),
                                       textOutput("noShame"),
                                       textOutput("plotdesc"),
                                       fluidRow(
                                         column(6,
                                                plotOutput("shamebreakout", height = "500px")),
                                         column(5,
                                                dataTableOutput("top10user"))),
                                       fluidRow(
                                         column(6,
                                                helpText("Select the Location and enter the password. Then click detail to see more information.",style = 'font-size:120%;margin-top:20px;margin-bottom:20px'))),
                                       fluidRow(
                                         column(3,
                                                selectInput("MAJCOM_choice", "Select Location", choices  = "")),
                                         column(3,
                                                passwordInput("password","Enter the Password"))
                                       ),
                                       fluidRow(
                                         column(1,offset = 2,
                                                actionButton("MAJDetail","Detail",style = 'font-size:100%;margin-top:10px;margin-bottom:20px;height:40px;width:215px'))
                                       ),
                                       fluidRow(
                                         column(6,
                                                textOutput("PWordText"))
                                       ),
                                       fluidRow(
                                         column(6,
                                                textOutput("SiteText"))
                                       ), fluidRow(
                                         column(6,
                                                plotOutput("sitePlot", click = "shamebreakout_click", height = "600px")),
                                         column(6,
                                                dataTableOutput("siteDetail"))),
                                       fluidRow(
                                         column(6,
                                                textOutput("SystemText"))
                                       ),
                                       fluidRow(
                                         column(6,
                                                plotOutput("systemPlot",  height = "600px")),
                                         column(6,
                                                dataTableOutput("systemDetail"))),
                                       fluidRow(
                                         column(6,
                                                textOutput("UserText"))
                                       ),
                                       fluidRow(
                                         column(6,
                                                plotOutput("userPlot", height = "600px")),
                                         column(6,
                                                dataTableOutput("userDetail"))),
                                       fluidRow(
                                         column(6,
                                                textOutput("CompText"))
                                       ),
                                       fluidRow(
                                         column(6,
                                                dataTableOutput("CompDetail")))),
                              tabPanel("Site Detail",
                                       verbatimTextOutput("shame_x_value"),
                                       fluidRow(
                                         column(6,
                                                plotOutput("site_userplot", height = "600px")),
                                         column(6,
                                                dataTableOutput("site_userdeets"))),
                                       fluidRow(
                                         column(6,
                                                plotOutput("site_systemplot", height = "600px")),
                                         column(6,
                                                dataTableOutput("site_systemdeets")))


                              ),
                              tabPanel("Manual Entries",
                                       helpText("Click the Run button below to analyze manual entries.",style = 'font-size:120%;margin-top:20px;margin-bottom:20px'),
                                       numericInput("numMonths","Select the Number of Months to Analyze",value = 1,min = 1,max = 12),
                                       actionButton("RunManualTOT","Run"),
                                       verbatimTextOutput("testing"),
                                       fluidRow(
                                         column(6,
                                                plotOutput("manualtot",click = "manualtot_click", height = "550px")),
                                         column(6,
                                                dataTableOutput("manual_users")))))

                            )
                 )
                 #))

)


shinyApp(ui = ui, server = server)

